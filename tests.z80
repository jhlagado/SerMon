;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tests
;;
;; these tests will evaluate when TESTMODE = 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ; TEST_SET_TEXT "x"
    ; call interpret

    call depth
    expect 0, " depth"
    TEST_SET_TEXT ""
    _pushValue wordBuf1                 ; buffer
    _pushValue $40                      ; max length
    _pushValue $20                      ; delim
    _pushValue 0                        ; char
    call wordRead
    expect 0, " length 0"
    call depth
    expect 5, " depth"

    TEST_SET_TEXT "xx yyy"
    _pushValue wordBuf1                 ; buffer
    _pushValue $40                      ; max length
    _pushValue $20                      ; delim
    _pushValue $33                      ; char
    call wordRead
    expect 3, "xxx length 3"

    ; stack words

    _pushValue $AAAA
    _pushValue $BBBB
    _swap
    expect $AAAA, "swap $AAAA"
    expect $BBBB, "swap $BBBB"

    _pushValue $AAAA
    _pushValue $BBBB
    _over
    expect $AAAA, "over $AAAA"
    expect $BBBB, "over $BBBB"
    expect $AAAA, "over $AAAA"

    _pushValue $AAAA
    _pushValue $BBBB
    _pushValue $CCCC
    _rot
    expect $AAAA, "rot $AAAA"
    expect $CCCC, "rot $CCCC"
    expect $BBBB, "rot $BBBB"

    _pushValue $AAAA
    _pushValue $BBBB
    _pushValue $CCCC
    _nrot
    expect $BBBB, "nrot $BBBB"
    expect $AAAA, "nrot $AAAA"
    expect $CCCC, "nrot $CCCC"

    ; 2 stack words

    _pushValue 1001
    _pushValue 1002
    _pushValue 2001
    _pushValue 2002
    _swap2
    expect 1002, "swap 1002"
    expect 1001, "swap 1001"
    expect 2002, "swap 2002"
    expect 2001, "swap 2001"

    _pushValue 1001
    _pushValue 1002
    _dup2
    expect 1002, "dup2 1002"
    expect 1001, "dup2 1001"
    expect 1002, "dup2 1002"
    expect 1001, "dup2 1001"

    _pushValue 1001
    _pushValue 1002
    _pushValue 2001
    _pushValue 2002
    _over2
    expect 1002, "over2 1002"
    expect 1001, "over2 1001"
    expect 2002, "over2 2002"
    expect 2001, "over2 2001"
    expect 1002, "over2 1002"
    expect 1001, "over2 1001"

    _pushValue 1001
    _pushValue 1002
    _pushValue 2001
    _pushValue 2002
    _pushValue 3001
    _pushValue 3002
    _rot2
    expect 1002, "rot2 1002"
    expect 1001, "rot2 1001"
    expect 3002, "rot2 3002"
    expect 3001, "rot2 3001"
    expect 2002, "rot2 2002"
    expect 2001, "rot2 2001"

    _pushValue 1001
    _pushValue 1002
    _pushValue 2001
    _pushValue 2002
    _pushValue 3001
    _pushValue 3002
    _nrot2
    expect 2002, "nrot2 2002"
    expect 2001, "nrot2 2001"
    expect 1002, "nrot2 1002"
    expect 1001, "nrot2 1001"
    expect 3002, "nrot2 3002"
    expect 3001, "nrot2 3001"

    ; formatNum

    _pushValue wordBuf2
    _pushValue -123
    call formatNum
    expect 4, "length of -123 = 4"
    _pop H,L
    _load B,C, 0,(HL)
    expect $2D, "first char = '-'"

    ; divide

    _pushValue 40
    _pushValue 4
    call divide
    expect 0, "remainder 0"
    expect 10, "40 / 4 = 10"

    _pushValue 24
    _pushValue 10
    call divide
    expect 4, "remainder 4"
    expect 2, "24 / 10 = 2"

    ; _min

    _pushValue 1
    _pushValue 2
    _min
    expect 1, "min(1,2) = 1"

    ; max

    _pushValue 1
    _pushValue 2
    _max
    expect 2, "max(1,2) = 2"

    ; compareStr

    _skip
        s1: .cstr "string"
        s2: .cstr "String2"
    _endSkip

    _pushPText s1
    _pushPText s2
    _pushValue 7

    call compareStr

    expect -1, "s1 should be less than s2"

    _pushPText s2
    _pushPText s1
    _pushValue 6

    call compareStr

    expect 1, "s1 should be greater than s2"

    _pushPText s1
    _pushPText s1
    _pushValue 6

    call compareStr

    expect 0, "s1 should equal s1"

    _pushPText s1
    _pushPText s2
    _pushValue 0

    call compareStr
    expect 0, "zero length, s1 should equal s1"

    ; find

    _pushPText "find"
    _unpackStr
    call find
    expect HEADER_find, "found: find"

    _pushPText "printPStr"
    _unpackStr
    call find
    expect HEADER_printPStr, "found: printPStr"

    ; formatNum

    _pushValue wordBuf2
    _pushValue -123
    call formatNum
    _dup
    expect 4, "-123 length 4"
    call printCR
    call printStr

    ; unsigned Multiply

    _pushValue 16
    _pushValue 9
    call uMultiply
    _drop
    expect 144, '16 x 9 = 144'

    ; toNumber

    _pushText "",0
    call toNumber
    expect 0, 'no error'
    expect 0, 'zero'

    _pushText "-",1
    call toNumber
    expect 1, 'error'
    expect 0, 'zero'

    _pushText "1",1
    call toNumber
    expect 0, 'no error'
    expect 1, '1'

    _pushText "10",2
    call toNumber
    expect 0, 'no error'
    expect 10, '10'

    _pushText "-10",3
    call toNumber
    expect 0, 'no error'
    expect -10, '-10'

    _pushText "100",3
    call toNumber
    expect 0, 'no error'
    expect 100, '100'

    _pushText "-123",4
    call toNumber
    expect 0, 'no error'
    expect -123, '-123'


