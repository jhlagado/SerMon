;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tests
;;
;; these tests will evaluate when TESTMODE = 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    TEST_SET_TEXT "x"
    call interpret

    _pushValue $AAAA
    _pushValue $BBBB
    _swap
    EXPECT $AAAA, "swap $AAAA"
    EXPECT $BBBB, "swap $BBBB"

    _pushValue $AAAA
    _pushValue $BBBB
    _over
    EXPECT $AAAA, "over $AAAA"
    EXPECT $BBBB, "over $BBBB"
    EXPECT $AAAA, "over $AAAA"

    _pushValue $AAAA
    _pushValue $BBBB
    _pushValue $CCCC
    _rot
    EXPECT $AAAA, "rot $AAAA"
    EXPECT $CCCC, "rot $CCCC"
    EXPECT $BBBB, "rot $BBBB"

    _pushValue $AAAA
    _pushValue $BBBB
    _pushValue $CCCC
    _nrot
    EXPECT $BBBB, "nrot $BBBB"
    EXPECT $AAAA, "nrot $AAAA"
    EXPECT $CCCC, "nrot $CCCC"

    ; formatNum

    _pushValue wordBuf2
    _pushValue -123
    call formatNum
    EXPECT 4, "length of -123 = 4"
    _pop H,L
    loadWord B,C, 0,(HL)
    EXPECT $2D, "first char = '-'"

    ; divideWord

    _pushValue 40
    _pushValue 4
    call divideWord
    EXPECT 0, "remainder 0"
    EXPECT 10, "40 / 4 = 10"

    _pushValue 24
    _pushValue 10
    call divideWord
    EXPECT 4, "remainder 4"
    EXPECT 2, "24 / 10 = 2"
    
    ; _min
    _pushValue 1
    _pushValue 2
    _min
    EXPECT 1, "min(1,2) = 1"

    ; max
    _pushValue 1
    _pushValue 2
    _max
    EXPECT 2, "max(1,2) = 2"

    ; compareStr
    
    _skip
        s1: .cstr "string"
        s2: .cstr "String2"
    _endSkip
    
    _pushPText s1
    _pushValue 6
    _pushPText s2
    _pushValue 7
    
    call compareStr

    EXPECT -1, "s1 should be less than s2"

    _pushPText s2
    _pushValue 7
    _pushPText s1
    _pushValue 6
    
    call compareStr

    EXPECT 1, "s1 should be greater than s2"

    _pushPText s1
    _pushValue 6
    _pushPText s1
    _pushValue 6
    
    call compareStr

    EXPECT 0, "s1 should equal s1"

    _pushPText s1
    _pushValue 0
    _pushPText s2
    _pushValue 0
    
    call compareStr
    EXPECT 0, "zero length, s1 should equal s1"

    
