.engine mycomputer

TESTMODE equ 1

    .include "header-main.z80"

    jp TESTS_START

org START_RAM

.include "variables.z80"

START_USER:
TESTS_START:

    ld de, 1234

    ; word read

    TEST_SET_TEXT ""
    _push wordBuf1                 ; buffer
    _push $40                      ; max length
    _push $20                      ; delim
    _push 0                        ; char
    call wordRead
    call depth
    expect 2, " depth"
    expect 0, " length 0"
    expect wordBuf1, " wordBuf1"
    call drop                       ; cleanup depth

    TEST_SET_TEXT "xx yyy"
    _push wordBuf1                 ; buffer
    _push $40                      ; max length
    _push $20                      ; delim
    _push $33                      ; char
    call wordRead
    expect 3, "xxx length 3"

    ; stack

    call depth
    expect 0, " depth"

    _push $AAAA
    _push $BBBB
    call swap
    expect $AAAA, "swap $AAAA"
    expect $BBBB, "swap $BBBB"

    _push $AAAA
    _push $BBBB
    call over
    expect $AAAA, "over $AAAA"
    expect $BBBB, "over $BBBB"
    expect $AAAA, "over $AAAA"

    _push 1001
    _push 1002
    call dup2
    expect 1002, "dup2 1002"
    expect 1001, "dup2 1001"
    expect 1002, "dup2 1002"
    expect 1001, "dup2 1001"

    _push 40
    _push 4
    call divide
    expect 0, "remainder 0"
    expect 10, "40 / 4 = 10"

    _push 24
    _push 10
    call divide
    expect 4, "remainder 4"
    expect 2, "24 / 10 = 2"

    jr skipStr
        s1: .cstr "string"
        s2: .cstr "String2"
skipStr:
    _pushPStr s1
    _pushPStr s2
    _push 7

    call compareStr

    expect -1, "s1 should be less than s2"

    _pushPStr s2
    _pushPStr s1
    _push 6

    call compareStr

    expect 1, "s1 should be greater than s2"

    _pushPStr s1
    _pushPStr s1
    _push 6

    call compareStr

    expect 0, "s1 should equal s1"

    _pushPStr s1
    _pushPStr s2
    _push 0

    call compareStr
    expect 0, "zero length, s1 should equal s1"

    ; find

    _pushPStr "#$%"
    _unpackStr
    call find
    expect 0, "not found: #$%"

    _pushPStr "ok"
    _unpackStr
    call find
    expect HEADER_ok, "found: ok"

    ; formatNum

    _push wordBuf2
    _push -123
    call formatNum
    expect 4, "length of -123 = 4"
    _pop HL    
    _setTOS 0,(HL)
    expect $2D, "first char = '-'"

    _push wordBuf2
    _push -123
    call formatNum
    call dup
    expect 4, "-123 length 4"
    call printCR
    call printStr

    ; unsigned Multiply

    _push 16
    _push 9
    call uMultiply
    call drop
    expect 144, '16 x 9 = 144'

    ; toNumber

    _pushStr "x",1
    call toNumber
    expect 1, 'error'
    expect 0, 'zero'

    _pushStr "",0
    call toNumber
    expect 0, 'no error'
    expect 0, 'zero'

    _pushStr "-",1
    call toNumber
    expect 1, 'error'
    expect 0, 'zero'

    _pushStr "1",1
    call toNumber
    expect 0, 'no error'
    expect 1, '1'

    _pushStr "10",2
    call toNumber
    expect 0, 'no error'
    expect 10, '10'

    _pushStr "-10",3
    call toNumber
    expect 0, 'no error'
    expect -10, '-10'

    _pushStr "100",3
    call toNumber
    expect 0, 'no error'
    expect 100, '100'

    _pushStr "-123",4
    call toNumber
    expect 0, 'no error'
    expect -123, '-123'

    ; charToDigit

    _push $30
    call charToDigit
    expect 0, '0'

    _push $39
    call charToDigit
    expect 9, '9'

    _push $41
    call charToDigit
    expect 10, '10'

    _push $46
    call charToDigit
    expect 15, '15'

    _push $29
    call charToDigit
    expect -1, '< 0'

    _push $40
    call charToDigit
    expect -1, '>9'

    ; isValidDigit

    _push 0
    call isValidDigit
    expect TRUE, '0 in base 10'

    _push 9
    call isValidDigit
    expect TRUE, '9 in base 10'

    _push -1
    call isValidDigit
    expect FALSE, '-1 not in base 10'

    _push 10
    call isValidDigit
    expect FALSE, '10 not in base 10'






















    ; _push $AAAA
    ; _push $BBBB
    ; _push $CCCC
    ; _rot
    ; expect $AAAA, "rot $AAAA"
    ; expect $CCCC, "rot $CCCC"
    ; expect $BBBB, "rot $BBBB"

    ; _push $AAAA
    ; _push $BBBB
    ; _push $CCCC
    ; _nrot
    ; expect $BBBB, "nrot $BBBB"
    ; expect $AAAA, "nrot $AAAA"
    ; expect $CCCC, "nrot $CCCC"

    ; ; 2 stack words

    ; _push 1001
    ; _push 1002
    ; _push 2001
    ; _push 2002
    ; _swap2
    ; expect 1002, "swap 1002"
    ; expect 1001, "swap 1001"
    ; expect 2002, "swap 2002"
    ; expect 2001, "swap 2001"

    ; _push 1001
    ; _push 1002
    ; _push 2001
    ; _push 2002
    ; call over2
    ; expect 1002, "over2 1002"
    ; expect 1001, "over2 1001"
    ; expect 2002, "over2 2002"
    ; expect 2001, "over2 2001"
    ; expect 1002, "over2 1002"
    ; expect 1001, "over2 1001"

    ; _push 1001
    ; _push 1002
    ; _push 2001
    ; _push 2002
    ; _push 3001
    ; _push 3002
    ; _rot2
    ; expect 1002, "rot2 1002"
    ; expect 1001, "rot2 1001"
    ; expect 3002, "rot2 3002"
    ; expect 3001, "rot2 3001"
    ; expect 2002, "rot2 2002"
    ; expect 2001, "rot2 2001"

    ; _push 1001
    ; _push 1002
    ; _push 2001
    ; _push 2002
    ; _push 3001
    ; _push 3002
    ; _nrot2
    ; expect 2002, "nrot2 2002"
    ; expect 2001, "nrot2 2001"
    ; expect 1002, "nrot2 1002"
    ; expect 1001, "nrot2 1001"
    ; expect 3002, "nrot2 3002"
    ; expect 3001, "nrot2 3001"

    ; divide

    ; ; _min

    ; _push 1
    ; _push 2
    ; _min
    ; expect 1, "min(1,2) = 1"

    ; ; max

    ; _push 1
    ; _push 2
    ; _max
    ; expect 2, "max(1,2) = 2"

    ; compareStr





    _setTOS d,e
    call printNum

    _pushPStr "\r\nDone! \r\n"
    call printPStr
    halt

FAILED:
    .pstr "Failed: "
