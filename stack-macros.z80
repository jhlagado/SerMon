;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; param stack
;;
;; the top of the stack (TOS) is stored in register BC for efficiency
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; drop the top of param stack
.macro _drop                            ; x --
    _popNext B,C		                ; drop top of stack
.endm

; drop the next to top of param stack
.macro _dropNext                        ; x --
    dec IX                              
    dec IX
.endm

.macro _drop2                           ; x x --
    _dropNext
    _drop
.endm

.macro _drop3                           ; x --
    _dropNext
    _drop2
.endm

; duplicate the top of param stack
.macro _dup                             ; x -- x x
    _pushNext B,C
.endm

; duplicate the top of param stack
.macro _dup2                            ; xa xb -- xa xb xa xb
    _over
    _over
.endm

; duplicate second from top of param stack

.macro _over                            ;x1 x2 -- x1 x2 x1
    _dup
    ld C,(IX-4)
    ld B,(IX-3)
.endm

.macro _over2                           ;x1a x1b x2a x2b -- x1a x1b x2a x2b x1a x1b

    _dup2

    ld C,(IX-10)
    ld (IX-2),C
    ld B,(IX-9)
    ld (IX-1),B
    
    ld C,(IX-8)
    ld B,(IX-7)

.endm

; swap the top two items of param stack
; destroys AF'
.macro _swap                            ; x1 x2 -- x2 x1

    _alter2 (IX-2),C
    _alter2 (IX-1),B

.endm

; swap the top two items of param stack
; destroys AF',DE
.macro _swap2                           ; x1a x1b x2a x2b -- x2a x2b x1a x1b

    ld E, (IX-2)
    ld D, (IX-1)
    _alter2 (IX-6),E
    _alter2 (IX-4),C
    _alter2 (IX-5),D
    _alter2 (IX-3),B
    ld (IX-2),E
    ld (IX-1),D

.endm

; rot top three items, third from top ends up on top of param stack
; destroys AF'
.macro _rot                             ; x1 x2 x3 -- x2 x3 x1

    _alter3 (IX-2),C,(IX-4)
    _alter3 (IX-1),B,(IX-3)

.endm

; rot top three items, third from top ends up on top of param stack
; destroys AF',DE
.macro _rot2                            ; x1a x1b x2a x2b x3a x3b -- x2a x2b x3a x3b x1a x1b 

    ld E, (IX-2)
    ld D, (IX-1)
    _alter3 (IX-6),E,(IX-10)
    _alter3 (IX-5),D,(IX-9)
    _alter3 (IX-4),C,(IX-8)
    _alter3 (IX-3),B,(IX-7)
    ld (IX-2),E
    ld (IX-1),D

.endm

; reverse rot top three items, top of param stack becomes third from top  stack
; destroys AF'
.macro _nrot                            ; x1 x2 x3 -- x3 x1 x2

    _alter3 (IX-4),C,(IX-2)
    _alter3 (IX-3),B,(IX-1)

.endm

; rot top three items, third from top ends up on top of param stack
; destroys AF',DE
.macro _nrot2                           ; x1a x1b x2a x2b x3a x3b -- x3a x3b x1a x1b x2a x2b

    ld E, (IX-2)
    ld D, (IX-1)

    _alter3 (IX-10),E,(IX-6)
    _alter3 (IX-9),D,(IX-5)
    _alter3 (IX-8),C,(IX-4)
    _alter3 (IX-7),B,(IX-3)

    ld (IX-2),E
    ld (IX-1),D

.endm

.macro _min                             ; x1 x2 -- x 
    _pop H,L
    loadWord D,E, H,L                   ; make a copy of x1
    or A
    sbc HL,BC
    jr nc, L_%%M                              
    loadWord B,C, D,E
L_%%M:
.endm

.macro _max                             ; x1 x2 -- x 
    _pop H,L
    loadWord D,E, H,L                   ; make a copy of x1
    or A
    sbc HL,BC
    jr c, L_%%M                              
    loadWord B,C, D,E
L_%%M:
.endm

; Macros to deal with the param stack.
.macro _pushNext, regHI, regLO
    ld (IX+0), regLO                    ; PUSH register pair
    ld (IX+1), regHI
    inc IX
    inc IX
.endm

.macro _popNext, regHI, regLO
    dec IX                              ; POP register pair
    dec IX
    ld regHI, (IX+1)
    ld regLO, (IX+0)
.endm

; Macros to deal with the param stack with TOS in BC
.macro _push, regHI, regLO
    _dup                                ; push TOS 
    ld B, regHI                         ; move register pair into TOS 
    ld C, regLO
.endm

.macro _peek, regHI, regLO
    ld regLO, C
    ld regHI, B                         ; move TOS reg pair into register pair
.endm

.macro _peekNext, regHI, regLO
    ld regLO, (IX-2)
    ld regHI, (IX-1)                    ; move TOS reg pair into register pair
.endm

.macro _pop, regHI, regLO
    _peek regHI,regLO                   ; move TOS into into register pair
    _popNext B,C                        ; pop TOS
.endm

.macro _pushValue, value
    _dup                                ; push TOS
    ld BC, value                        ; set TOS to value
.endm

.macro _pushText, s1, len
    _pushValue tpt_text%%M
    _pushValue len
    _skip
tpt_text%%M:
        db s1
    _endskip
.endm

.macro _pushPText, s1
    _pushValue tpt_text%%M
    ld BC, tpt_text%%M
    _skip
tpt_text%%M:
        .pstr s1
    _endskip
.endm

.macro _toRetStack
    push BC
    _drop
.endm

.macro _fromRetStack
    _dup
    pop BC
.endm

.macro _isZero                          ; n -- b
    ld A,C
    cp B
    _drop
.endm


