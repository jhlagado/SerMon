;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; param stack
;;
;; the top of the stack (TOS) is stored in register BC for efficiency
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; drop the next to top of param stack
.macro _nip                             ; x y -- y
    dec IX
    dec IX
.endm

.macro _tuck                             ; x y -- y x y
    _pop H,L
    _tuckFrom H,L
.endm

.macro _drop2                           ; x x --
    _nip
    call drop
.endm

.macro _drop3                           ; x --
    _nip
    _drop2
.endm

; duplicate the top of param stack
.macro _dup2                            ; xa xb -- xa xb xa xb
    _over
    _over
.endm

; duplicate second from top of param stack

.macro _over                            ;x1 x2 -- x1 x2 x1
    call dup
    ld C,(IX-4)
    ld B,(IX-3)
.endm

.macro _over2                           ;x1a x1b x2a x2b -- x1a x1b x2a x2b x1a x1b

    _dup2

    ld C,(IX-10)
    ld (IX-2),C
    ld B,(IX-9)
    ld (IX-1),B

    ld C,(IX-8)
    ld B,(IX-7)

.endm

; swap the top two items of param stack
.macro _swap                            ; x1 x2 -- x2 x1
    push DE
    _alter2 -2,C
    _alter2 -1,B
    pop DE
.endm

; swap the top two items of param stack
.macro _swap2                           ; x1a x1b x2a x2b -- x2a x2b x1a x1b
    push DE
    _alter2x -1,-5
    _alter2x -2,-6
    _alter2 -4,C
    _alter2 -3,B
    pop DE
.endm

; rot top three items, third from top ends up on top of param stack
.macro _rot                             ; x1 x2 x3 -- x2 x3 x1
    push DE
    _alter3 -2,C,-4
    _alter3 -1,B,-3
    pop DE
.endm

; rot top three items, third from top ends up on top of param stack
; destroys AF'
.macro _rot2                            ; x1a x1b x2a x2b x3a x3b -- x2a x2b x3a x3b x1a x1b
    push DE
    _alter3x -6,-2,-10
    _alter3x -5,-1,-9
    _alter3 -4,C,-8
    _alter3 -3,B,-7
    pop DE
.endm

; reverse rot top three items, top of param stack becomes third from top  stack
; destroys AF'
.macro _nrot                            ; x1 x2 x3 -- x3 x1 x2
    push DE
    _alter3 -4,C,-2
    _alter3 -3,B,-1
    pop DE
.endm

; rot top three items, third from top ends up on top of param stack
; destroys AF',DE
.macro _nrot2                           ; x1a x1b x2a x2b x3a x3b -- x3a x3b x1a x1b x2a x2b
    push DE

    _alter3x -10,-2,-6
    _alter3x -9,-1,-5
    _alter3 -8,C,-4
    _alter3 -7,B,-3

    pop DE
.endm

; Macros to deal with the param stack with TOS in BC

.macro _push, regHI, regLO              ; rp = x ; y -- y x
    call dup                                ; push TOS
    ld B, regHI                         ; move register pair into TOS
    ld C, regLO
.endm

.macro _peek, regHI, regLO              ; x -- x ; rp = x
    ld regLO, C
    ld regHI, B                         ; move TOS reg pair into register pair
.endm

.macro _pop, regHI, regLO
    _peek regHI,regLO                   ; move TOS into into register pair
    call drop
.endm

.macro _tuckFrom, regHI, regLO          ; rp = x; y -- x y
    ld (IX+0), regLO                    ; PUSH register pair
    ld (IX+1), regHI
    inc IX
    inc IX
.endm

.macro _nipInto, regHI, regLO           ; x y -- y ; rep = x
    dec IX                              ; POP register pair
    dec IX
    ld regHI, (IX+1)
    ld regLO, (IX+0)
.endm

.macro _overInto, regHI, regLO          ; x y -- y  rp = x
    ld regLO, (IX-2)
    ld regHI, (IX-1)                    ; move TOS reg pair into register pair
.endm

.macro _pushValue, value
    call dup                                ; push TOS
    ld BC, value                        ; set TOS to value
.endm

.macro _pushText, s1, len
    _pushValue tpt_text%%M
    _pushValue len
    _skip
tpt_text%%M:
        db s1
    _endskip
.endm

.macro _pushPText, s1
    _pushValue tpt_text%%M
    ld BC, tpt_text%%M
    _skip
tpt_text%%M:
        .pstr s1
    _endskip
.endm

.macro _toRetStack
    push BC
    call drop
.endm

.macro _fromRetStack
    call dup
    pop BC
.endm

.macro _isZero                          ; n -- b
    ld A,C
    cp B
    call drop
.endm

.macro _min                             ; x1 x2 -- x
    _pop H,L
    loadWord D,E, H,L                   ; make a copy of x1
    or A
    sbc HL,BC
    jr nc, L_%%M
    loadWord B,C, D,E
L_%%M:
.endm

.macro _max                             ; x1 x2 -- x
    _pop H,L
    loadWord D,E, H,L                   ; make a copy of x1
    or A
    sbc HL,BC
    jr c, L_%%M
    loadWord B,C, D,E
L_%%M:
.endm

