;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; data stack
;;
;; the top of the stack (TOS) is stored in register BC for efficiency
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; macros for literal and immediate data

.macro _getTOS, regHI, regLO                  ; x -- x ; rp = x
    ld regLO, C
    ld regHI, B                             ; move TOS reg pair into register pair
.endm

.macro _setTOS, regHI, regLO                  ; rp = x ; y -- x
    ld C, regLO
    ld B, regHI                             ; move TOS reg pair into register pair
.endm

.macro _push, src                           ; put src (value or memory) location on top of param stack
    call dup
    ld BC, src
.endm

.macro _pop, dest                           ; put top of param stack into dest
    ld dest, BC
    call drop
.endm

.macro _pushWord, word
    call dup
    ld BC,word
.endm

.macro _pushChar, char
    call dup
    _setTOS 0,char
.endm

.macro _pushStr, str, len
    _push tpt_text%%M
    _push len
    _skip
tpt_text%%M:
        db str
    _endskip
.endm

.macro _pushPStr, s1
    _push tpt_text%%M
    ld BC, tpt_text%%M
    _skip
tpt_text%%M:
        .pstr s1
    _endskip
.endm

.macro _min                                 ; x1 x2 -- x
    _getTOS H,L
    _getTOS D,E                               ; make a copy of x2
    call drop
    or A
    sbc HL,BC
    jr nc, L_%%M
    _setTOS  D,E
L_%%M:
.endm

.macro _max                                 ; x1 x2 -- x
    _getTOS H,L
    _getTOS D,E                               ; make a copy of x2
    call drop
    or A
    sbc HL,BC
    jr c, L_%%M
    _setTOS  D,E
L_%%M:
.endm

; divide by 2
.macro _div2                                 ; n -- n
    srl B
    rr C
.endm

.macro _ifZero
    call isZero
    jp z, L_%%M
    jp $              ; placeholder jump to _else or _endif
    STRUC_PUSH $
L_%%M:
.endm

.macro _ifNotZero
    call isZero
    jp nz, L_%%M
    jp $              ; placeholder jump to _else or _endif
    STRUC_PUSH $
L_%%M:
.endm

.macro _untilZero
    call isZero
    jp z, DLOOP_TOP - 3  ; jump to jump to enddo
    DLOOP_FWD               ; needed?
.endm

.macro _untilNotZero
    call isZero
    jp nz, DLOOP_TOP - 3  ; jump to jump to enddo
    DLOOP_FWD               ; needed?
.endm

.macro _isNegative
    bit 7,A
.endm

