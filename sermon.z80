
0001   C3 3B 00               JP   start
0038                          .ORG   $0038
0038                RST38:       ; rst 38
0038   C3 A2 05               JP   serialIn
003B                START:
003B   31 00 00               LD   SP,RET_STACK   ; Initialise the return stack.
003E   DD 21 00 20            LD   IX,dataStack   ; initialise the data stack.
0042   01 00 00               LD   BC,0
0045   ED 43 CD 21            LD   (nestLevel),BC
0049   01 0A 00               LD   BC,10
004C   ED 43 CF 21            LD   (numberBase),BC
0050   ED 4B 0F 07            LD   BC,(initialLatest)
0054   ED 43 D1 21            LD   (latestDef),BC
0058   CD EB 00               CALL   initInput
005B   CD 8B 05               CALL   initSerial
005E                          IF   TESTMODE = 0
005E                          ;*Macro unroll:  _pushPStr "SerMon 2020\r\n\r\n"
005E                          ;*Macro unroll:  _push tpt_textM_666
005E   CD 42 06               CALL   dup
0061   01 6A 00               LD   BC,tpt_textM_666
0064   01 6A 00               LD   BC,tpt_textM_666
0067                          ;*Macro unroll:  _skip
0067   C3 67 00               JP   $
006A                TPT_TEXTM_666:
006A   0F 53 65 72 4D 6F 6E 20 32 30 32 30 0D 0A 0D 0A .PSTR   "SerMon 2020\r\n\r\n"
007A                          ;*Macro unroll:  _endskip
007A   CD 65 05               CALL   printPStr
007D   CD AF 01               CALL   repl
0080   76                     HALT
0081                          ELSE
                              JP   TESTS_START
0081                          ENDIF
0081                             ;
0081                             ; dictionary routines
0081                             ;
0081                             ;
0081                          ;*Macro unroll: defword "find",0,FIND                   ; ptr len -- ptrOrZero
0081                HEADER_FIND:      ; ptr len -- ptrOrZero
0081   00 00                  DW   backLink
0083                BACKLINK:   .SET   HEADER_FIND
0083   00                     DB   0
0084   04 66 69 6E 64         .PSTR   "find"
0089                FIND:
0089                          ;*Macro unroll:  _push (latestDef)                   ; ptr len headptr
0089   CD 42 06               CALL   dup   ; ptr len headptr
008C   ED 4B D1 21            LD   BC,(latestDef)
0090                          ;*Macro unroll:  _do
0090   18 03                  JR   L_M_679
0092   C3 92 00               JP   $
0095                L_M_679:
0095   CD 42 06               CALL   dup
0098                          ;*Macro unroll:  _untilZero                          ; NULL pointer?  (end of the linked list)
0098   CD 8B 06               CALL   isZero   ; NULL pointer?  (end of the linked list)
009E   CD 42 06               CALL   dup   ; ptr len headptr headptr
00A1   03                     INC   BC
00A2   03                     INC   BC   ; ptr len headptr flagsPtr
00A3   0A                     LD   A,(BC)   ; A = flags
00A4   CB 7F                  BIT   7,A   ; test HIDDEN flag
00A6                          ;*Macro unroll:  _if nz
00A6   C2 AC 00               JP   nz,L_M_687
00A9   C3 A9 00               JP   $
00AC                L_M_687:
00AC   CD 4D 06               CALL   drop   ; ptr len headptr
00AF                          ;*Macro unroll:  _else
00AF   C3 AF 00               JP   $
00B2   03                     INC   BC   ; ptr len headptr namePtr   ; length
00B3   03                     INC   BC   ; ptr len headptr namePtr'  ; first char
00B4                          ;*Macro unroll:  _over2                      ; ptr len headptr namePtr' ptr len
00B4   CD 7D 06               CALL   dup2   ; ptr len headptr namePtr' ptr len
00B7                          ;*Macro unroll:  _poke (IX-9),(IX-10)
00B7   DD 4E F6               LD   C,(IX-10)
00BA   DD 46 F7               LD   B,(IX-9)
00BD                          ;*Macro unroll:  _peek (IX-1),(IX-2)
00BD   DD 71 FE               LD   (IX-2),C
00C0   DD 70 FF               LD   (IX-1),B
00C3                          ;*Macro unroll:  _poke (IX-7),(IX-8)
00C3   DD 4E F8               LD   C,(IX-8)
00C6   DD 46 F9               LD   B,(IX-7)
00C9   CD C9 06               CALL   compareStr   ; ptr len headptr match     ;match == 0
00CC                          ;*Macro unroll:  _untilZero                          ; ptr len headptr
00CC   CD 8B 06               CALL   isZero   ; ptr len headptr
00D2                          ;*Macro unroll:  _endif
00D2   CD AD 06               CALL   fetch   ; ptr len headptr'
00D5                          ;*Macro unroll:  _enddo
00D8   CD 69 06               CALL   nip
00DB   CD 69 06               CALL   nip   ; headptr
00DE   C9                     RET
00DF                GETBODY:      ; ptr -- ptr'
00DF   03                     INC   BC   ;
00E0   03                     INC   BC   ; skip over backlink
00E1   03                     INC   BC   ; skip over flags
00E2   0A                     LD   A,(BC)   ; A = len of routine's name
00E3   03                     INC   BC   ; skip over len
00E4   81                     ADD   A,C
00E5   4F                     LD   C,A
00E6   3E 00                  LD   A,0
00E8   88                     ADC   A,B
00E9   47                     LD   B,A
00EA   C9                     RET
00EB                INITINPUT:
00EB   21 CD 20               LD   HL,linebuf
00EE   22 C5 20               LD   (lineBufStart),HL
00F1   22 C9 20               LD   (currkey),HL
00F4   22 CB 20               LD   (linebuftop),HL
00F7   21 80 00               LD   HL,LINE_BUFSIZE
00FA   22 C7 20               LD   (lineBufSize),HL
00FD   C9                     RET
00FE                             ;
00FE                             ; getline - input line of text ***
00FE                             ; params: HL = addr, DE = max (currently up to 255)
00FE                             ; returns: BC = length - up to 255
00FE                             ;
00FE                GETLINE:
00FE   F5                     PUSH   AF
00FF   E5                     PUSH   HL
0100                          ;*Macro unroll:  _pushPStr "\r\n> "
0100                          ;*Macro unroll:  _push tpt_textM_729
0100   CD 42 06               CALL   dup
0103   01 0C 01               LD   BC,tpt_textM_729
0106   01 0C 01               LD   BC,tpt_textM_729
0109                          ;*Macro unroll:  _skip
0109   C3 09 01               JP   $
010C                TPT_TEXTM_729:
010C   04 0D 0A 3E 20         .PSTR   "\r\n> "
0111                          ;*Macro unroll:  _endskip
0111   CD 65 05               CALL   printPStr
0114   E1                     POP   HL
0115   E5                     PUSH   HL
0116   01 00 00               LD   BC,0
0119                          ;*Macro unroll:  _do
0119   18 03                  JR   L_M_734
011B   C3 1B 01               JP   $
011E                L_M_734:
011E                          ;*Macro unroll:  _do
011E   18 03                  JR   L_M_735
0120   C3 20 01               JP   $
0123                L_M_735:
0123   CD 08 06               CALL   getc
0126   FE 08                  CP   $08
0128                          ;*Macro unroll:  _if z
0128   CA 2E 01               JP   z,L_M_738
012B   C3 2B 01               JP   $
012E                L_M_738:
012E   CD 42 06               CALL   dup
0131                          ;*Macro unroll:  _ifNotZero
0131   CD 8B 06               CALL   isZero
0134   C2 3A 01               JP   nz,L_M_740
0137   C3 37 01               JP   $
013A                L_M_740:
013A   2B                     DEC   HL
013B   0B                     DEC   BC
013C   3E 08                  LD   a,$08
013E   CD EE 05               CALL   putc
0141   3E 20                  LD   A," "
0143   CD EE 05               CALL   putc
0146   3E 08                  LD   A,$08
0148   CD EE 05               CALL   putc
014B                          ;*Macro unroll:  _endif
014B                          ;*Macro unroll:  _else
014B   C3 4B 01               JP   $
014E   77                     LD   (HL),A
014F   23                     INC   HL
0150   03                     INC   BC
0151   CB 7F                  BIT   7,a
0153                          ;*Macro unroll:  _if z
0153   CA 59 01               JP   z,L_M_755
0156   C3 56 01               JP   $
0159                L_M_755:
0159   CD EE 05               CALL   putc
015C                          ;*Macro unroll:  _endif
015C   FE 0D                  CP   "\r"
015E   28 0B                  JR   z,getLineCheck
0160   FE 0A                  CP   "\n"
0162   28 07                  JR   z,getLineCheck
0164   7B                     LD   A,E
0165   B9                     CP   C
0166   38 03                  JR   c,getLineCheck
0168                          ;*Macro unroll:  _endif
0168                          ;*Macro unroll:  _enddo
016B                GETLINECHECK:
016B   3E 00                  LD   a,0
016D   B9                     CP   c
016E                          ;*Macro unroll:  _until nz
0171                          ;*Macro unroll:  _enddo
0174   F1                     POP   AF
0175   E1                     POP   HL
0176   CD 35 05               CALL   printCR
0179   C9                     RET
017A                             ;
017A                             ; getKey -  inputs a line buffered character
017A                             ; params: none
017A                             ; returns: A = character,
017A                             ;
017A                GETKEY:
017A   E5                     PUSH   HL
017B   D5                     PUSH   DE
017C   C5                     PUSH   BC
017D   2A C9 20               LD   HL,(currkey)
0180   ED 5B CB 20            LD   DE,(lineBufTop)
0184   B7                     OR   A
0185   ED 52                  SBC   HL,DE   ; exhausted the input lineBuf?
0187                          ;*Macro unroll:  _if nc
0187   D2 8D 01               JP   nc,L_M_789
018A   C3 8A 01               JP   $
018D                L_M_789:
018D   2A C5 20               LD   HL,(lineBufStart)   ; lineBuf
0190   ED 5B C7 20            LD   DE,(lineBufSize)   ; LINE_BUFSIZE
0194   CD FE 00               CALL   getline
0197   21 CD 20               LD   HL,lineBuf
019A   22 C9 20               LD   (currkey),HL
019D   B7                     OR   A
019E   ED 4A                  ADC   HL,BC   ; lineBuf+DE = lineBufTop
01A0   22 CB 20               LD   (lineBufTop),HL
01A3                          ;*Macro unroll:  _endif
01A3   2A C9 20               LD   HL,(currkey)
01A6   7E                     LD   A,(HL)   ; get next key from input lineBuf
01A7   23                     INC   HL
01A8   22 C9 20               LD   (currkey),HL   ; increment currkey
01AB   C1                     POP   BC
01AC   D1                     POP   DE
01AD   E1                     POP   HL
01AE   C9                     RET
01AF                REPL:
01AF   DD 21 00 20            LD   IX,dataStack   ; reset data stack
01B3   CD B7 01               CALL   interpret
01B6   C9                     RET
01B7                INTERPRET:
01B7                          ;*Macro unroll:  _do
01B7   18 03                  JR   L_M_812
01B9   C3 B9 01               JP   $
01BC                L_M_812:
01BC                          ;*Macro unroll:  _push wordBuf1             ; str
01BC   CD 42 06               CALL   dup   ; str
01BF   01 4D 21               LD   BC,wordBuf1
01C2                          ;*Macro unroll:  _push $40                  ; str maxlen
01C2   CD 42 06               CALL   dup   ; str maxlen
01C5   01 40 00               LD   BC,$40
01C8                          ;*Macro unroll:  _push $20                  ; str maxlen delim
01C8   CD 42 06               CALL   dup   ; str maxlen delim
01CB   01 20 00               LD   BC,$20
01CE   CD 78 04               CALL   parseWord   ; str len
01D1   CD 42 06               CALL   dup   ; str len len
01D4                          ;*Macro unroll:  _ifZero                         ; str len
01D4   CD 8B 06               CALL   isZero   ; str len
01D7   CA DD 01               JP   z,L_M_818
01DA   C3 DA 01               JP   $
01DD                L_M_818:
01DD   CD 84 06               CALL   drop2   ; --
01E0                          ;*Macro unroll:  _break
01E3                          ;*Macro unroll:  _else
01E3   C3 E3 01               JP   $
01E6                          ;*Macro unroll:  _push (nestLevel)           ; str len nesting
01E6   CD 42 06               CALL   dup   ; str len nesting
01E9   ED 4B CD 21            LD   BC,(nestLevel)
01ED                          ;*Macro unroll:  _ifZero                     ; str len
01ED   CD 8B 06               CALL   isZero   ; str len
01F0   CA F6 01               JP   z,L_M_823
01F3   C3 F3 01               JP   $
01F6                L_M_823:
01F6   CD 03 02               CALL   interpImmed   ; num?
01F9                          ;*Macro unroll:  _else
01F9   C3 F9 01               JP   $
01FC   CD 53 02               CALL   interpCompile   ;
01FF                          ;*Macro unroll:  _endIf
01FF                          ;*Macro unroll:  _endIf
01FF                          ;*Macro unroll:  _endDo
0202   C9                     RET
0203                INTERPIMMED:      ; str len -- num?
0203   CD 7D 06               CALL   dup2   ; str len str len
0206   CD 89 00               CALL   find   ; str len ptrOrNull
0209   CD 42 06               CALL   dup   ; str len ptrOrNull ptrOrNull
020C                          ;*Macro unroll:  _ifZero                             ; str len ptrOrNull
020C   CD 8B 06               CALL   isZero   ; str len ptrOrNull
020F   CA 15 02               JP   z,L_M_835
0212   C3 12 02               JP   $
0215                L_M_835:
0215   CD 4D 06               CALL   drop   ; str len
0218   CD 71 03               CALL   toNumber   ; num err
021B                          ;*Macro unroll:  _ifNotZero
021B   CD 8B 06               CALL   isZero
021E   C2 24 02               JP   nz,L_M_838
0221   C3 21 02               JP   $
0224                L_M_838:
0224   CD 4D 06               CALL   drop   ; --
0227                          ;*Macro unroll:  _pushPStr "NOT FOUND!\r\n"
0227                          ;*Macro unroll:  _push tpt_textM_840
0227   CD 42 06               CALL   dup
022A   01 33 02               LD   BC,tpt_textM_840
022D   01 33 02               LD   BC,tpt_textM_840
0230                          ;*Macro unroll:  _skip
0230   C3 30 02               JP   $
0233                TPT_TEXTM_840:
0233   0C 4E 4F 54 20 46 4F 55 4E 44 21 0D 0A .PSTR   "NOT FOUND!\r\n"
0240                          ;*Macro unroll:  _endskip
0240   CD 65 05               CALL   printPStr   ; --
0243                          ;*Macro unroll:  _endIf                          ; else leave num on stack
0243                          ;*Macro unroll:  _else
0243   C3 43 02               JP   $
0246   CD 69 06               CALL   nip   ; str ptr
0249   CD 69 06               CALL   nip   ; ptr
024C   CD DF 00               CALL   getBody   ; ptr'
024F   CD 54 02               CALL   execute   ; ?
0252                          ;*Macro unroll:  _endif
0252   C9                     RET
0253                INTERPCOMPILE:
0253   C9                     RET
0254                EXECUTE:
0254                          ;*Macro unroll:  _toRetStack
0254   C5                     PUSH   BC
0255   CD 4D 06               CALL   drop
0258   C9                     RET
0259                             ; destroys: HL
0259                NEGATE:      ; num -- -num
0259   21 00 00               LD   HL,0
025C   B7                     OR   A
025D   ED 42                  SBC   HL,BC
025F                          ;*Macro unroll:  _poke  H,L
025F   4D                     LD   C,L
0260   44                     LD   B,H
0261   C9                     RET
0262                             ; destroys: HL
0262                DIVIDE:      ; dividend divisor -- quotient remainder
0262   D5                     PUSH   DE
0263                          ;*Macro unroll:  _peek D,E                           ; DE = divisor, BC = dividend
0263   59                     LD   E,C   ; DE = divisor, BC = dividend
0264   50                     LD   D,B
0265   CD 4D 06               CALL   drop
0268   21 00 00               LD   HL,0
026B   78                     LD   A,B
026C   CD 7E 02               CALL   divide2
026F   47                     LD   B,A
0270   79                     LD   A,C
0271   48                     LD   C,B
0272   CD 7E 02               CALL   divide2
0275   41                     LD   B,C
0276   4F                     LD   C,A
0277   CD 42 06               CALL   dup
027A                          ;*Macro unroll:  _poke H,L                           ; TOS = remainder
027A   4D                     LD   C,L   ; TOS = remainder
027B   44                     LD   B,H
027C   D1                     POP   DE
027D   C9                     RET
027E                DIVIDE2:
027E   06 08                  LD   B,8
0280                          ;*Macro unroll:  _do
0280   18 03                  JR   L_M_882
0282   C3 82 02               JP   $
0285                L_M_882:
0285   17                     RLA
0286   ED 6A                  ADC   HL,HL
0288   ED 52                  SBC   HL,DE
028A                          ;*Macro unroll:  _if c
028A   DA 90 02               JP   c,L_M_886
028D   C3 8D 02               JP   $
0290                L_M_886:
0290   19                     ADD   HL,DE
0291                          ;*Macro unroll:  _endif
0291                          ;*Macro unroll:  _djnz
0293   17                     RLA
0294   2F                     CPL
0295   C9                     RET
0296                             ; destroys: DE
0296                UMULTIPLY:      ; u1 u2 -- plo phi
0296   E5                     PUSH   HL
0297                          ;*Macro unroll:  _peek D,E                           ; u1 u2
0297   59                     LD   E,C   ; u1 u2
0298   50                     LD   D,B
0299   CD 4D 06               CALL   drop   ; u1
029C   21 00 00               LD   HL,0
029F   3E 11                  LD   A,17   ; loop counter
02A1   B7                     OR   A   ; clear carry
02A2                          ;*Macro unroll:  _do
02A2   18 03                  JR   L_M_901
02A4   C3 A4 02               JP   $
02A7                L_M_901:
02A7   CB 1C                  RR   H
02A9   CB 1D                  RR   L
02AB   CB 1A                  RR   D
02AD   CB 1B                  RR   E
02AF                          ;*Macro unroll:  _if c
02AF   DA B5 02               JP   c,L_M_906
02B2   C3 B2 02               JP   $
02B5                L_M_906:
02B5   09                     ADD   HL,BC
02B6                          ;*Macro unroll:  _endif
02B6   3D                     DEC   A
02B7                          ;*Macro unroll:  _until z
02BA                          ;*Macro unroll:  _enddo
02BD                          ;*Macro unroll:  _poke  D,E                          ; plo
02BD   4B                     LD   C,E   ; plo
02BE   42                     LD   B,D
02BF   CD 42 06               CALL   dup   ; plo phi
02C2                          ;*Macro unroll:  _poke  H,L
02C2   4D                     LD   C,L
02C3   44                     LD   B,H
02C4   E1                     POP   HL
02C5   C9                     RET
02C6                PLUS:        ; x y -- z
02C6   E5                     PUSH   HL
02C7                          ;*Macro unroll:  _nipInto H,L
02C7   DD 2B                  DEC   IX
02C9   DD 2B                  DEC   IX
02CB   DD 66 01               LD   H,(IX+1)
02CE   DD 6E 00               LD   L,(IX+0)
02D1   09                     ADD   HL,BC
02D2                          ;*Macro unroll:  _poke H,L
02D2   4D                     LD   C,L
02D3   44                     LD   B,H
02D4   E1                     POP   HL
02D5   C9                     RET
02D6                MINUS:       ; x y -- z
02D6   E5                     PUSH   HL
02D7                          ;*Macro unroll:  _nipInto H,L
02D7   DD 2B                  DEC   IX
02D9   DD 2B                  DEC   IX
02DB   DD 66 01               LD   H,(IX+1)
02DE   DD 6E 00               LD   L,(IX+0)
02E1   B7                     OR   A
02E2   ED 42                  SBC   HL,BC
02E4                          ;*Macro unroll:  _poke H,L
02E4   4D                     LD   C,L
02E5   44                     LD   B,H
02E6   E1                     POP   HL
02E7   C9                     RET
02E8                CARRYTOBOOL:
02E8   01 00 00               LD   BC,0
02EB                          ;*Macro unroll:  _if c
02EB   DA F1 02               JP   c,L_M_934
02EE   C3 EE 02               JP   $
02F1                L_M_934:
02F1   0B                     DEC   BC
02F2                          ;*Macro unroll:  _endif
02F2   C9                     RET
02F3                          ;*Macro unroll: defword "formatNum", 0, formatNum       ; ptr num -- ptr len
02F3                HEADER_FORMATNUM:      ; ptr num -- ptr len
02F3   81 00                  DW   backLink
02F5                BACKLINK:   .SET   HEADER_formatNum
02F5   00                     DB   0
02F6   09 66 6F 72 6D 61 74 4E 75 6D .PSTR   "formatNum"
0300                FORMATNUM:
0300   CD 5F 06               CALL   over   ; ptr num ptr
0303   CD 6E 06               CALL   swap   ; ptr ptr num
0306                          ;*Macro unroll:  _isNegative                         ; Detect sign of num
0306   CB 7F                  BIT   7,A   ; Detect sign of num
0308                          ;*Macro unroll:  _if nz
0308   C2 0E 03               JP   nz,L_M_942
030B   C3 0B 03               JP   $
030E                L_M_942:
030E   CD 59 02               CALL   negate   ; ptr ptr num1
0311   CD 6E 06               CALL   swap   ; ptr num1 ptr ptr
0314                          ;*Macro unroll:  _pushChar '-'                   ; ptr num1 ptr '-'
0314   CD 42 06               CALL   dup   ; ptr num1 ptr "-"
0317   06 00                  LD   B,0
0319   0E 2D                  LD   C,"-"
031B   CD 5F 06               CALL   over   ; ptr num1 ptr "-" ptr
031E   CD BF 06               CALL   storeChar   ; ptr num1 ptr
0321   03                     INC   BC   ; ptr num1 ptr'
0322   CD 6E 06               CALL   swap   ; ptr ptr' num1
0325                          ;*Macro unroll:  _endif
0325                          ;*Macro unroll:  _push (numberBase)                  ; ptr ptr' num1 base
0325   CD 42 06               CALL   dup   ; ptr ptr' num1 base
0328   ED 4B CF 21            LD   BC,(numberBase)
032C   CD 6E 06               CALL   swap   ; ptr ptr' base num1
032F   16 00                  LD   D,0   ; D counter
0331                          ;*Macro unroll:  _do
0331   18 03                  JR   L_M_954
0333   C3 33 03               JP   $
0336                L_M_954:
0336   14                     INC   D
0337   CD 5F 06               CALL   over   ; ptr ptr' base num1 base
033A   CD 62 02               CALL   divide   ; ptr ptr' base num2 rem
033D                          ;*Macro unroll:  _toRetStack                     ; ptr ptr' base num2
033D   C5                     PUSH   BC   ; ptr ptr' base num2
033E   CD 4D 06               CALL   drop
0341   CD 42 06               CALL   dup   ; ptr ptr' base num2 num2
0344                          ;*Macro unroll:  _untilZero
0344   CD 8B 06               CALL   isZero
034A                          ;*Macro unroll:  _enddo
034D   CD 84 06               CALL   drop2   ; ptr ptr'
0350                          ;*Macro unroll:  _do
0350   18 03                  JR   L_M_963
0352   C3 52 03               JP   $
0355                L_M_963:
0355                          ;*Macro unroll:  _fromRetStack                   ; ptr ptr' digit
0355   CD 42 06               CALL   dup   ; ptr ptr' digit
0358   C1                     POP   BC
0359   CD 24 04               CALL   digitToChar   ; ptr ptr' ascii
035C   CD 5F 06               CALL   over   ; ptr ptr" ascii ptr"
035F   CD BF 06               CALL   storeChar   ; ptr ptr'
0362   03                     INC   BC   ; ptr ptr""
0363   15                     DEC   D
0364                          ;*Macro unroll:  _until z
0367                          ;*Macro unroll:  _enddo
036A   CD 5F 06               CALL   over   ; ptr ptr"" ptr
036D   CD D6 02               CALL   minus   ; ptr len
0370   C9                     RET
0371                TONUMBER:      ; str len -- num err
0371   CD 42 06               CALL   dup   ; str len len
0374                          ;*Macro unroll:  _ifZero                             ; if zero then return 0 0
0374   CD 8B 06               CALL   isZero   ; if zero then return 0 0
0377   CA 7D 03               JP   z,L_M_977
037A   C3 7A 03               JP   $
037D                L_M_977:
037D   CD 69 06               CALL   nip   ; zero
0380   CD 42 06               CALL   dup   ; zero zero
0383   C9                     RET      ; -- 0 0
0384                          ;*Macro unroll:  _endif
0384                          ;*Macro unroll:  _overInto H,L                       ; str len ; HL = str
0384   DD 6E FE               LD   L,(IX-2)   ; str len ; HL = str
0387   DD 66 FF               LD   H,(IX-1)
038A   7E                     LD   A,(HL)   ; A = char
038B   FE 2D                  CP   "-"   ; is A negative number?
038D                          ;*Macro unroll:  _if z
038D   CA 93 03               JP   z,L_M_985
0390   C3 90 03               JP   $
0393                L_M_985:
0393   23                     INC   HL
0394   0B                     DEC   BC   ; str len
0395   CD 42 06               CALL   dup   ; str len len
0398                          ;*Macro unroll:  _ifZero
0398   CD 8B 06               CALL   isZero
039B   CA A1 03               JP   z,L_M_989
039E   C3 9E 03               JP   $
03A1                L_M_989:
03A1   CD 69 06               CALL   nip   ; zero
03A4   CD 42 06               CALL   dup   ; zero zero
03A7   01 01 00               LD   BC,1
03AA   C9                     RET      ; 0 1
03AB                          ;*Macro unroll:  _else
03AB   C3 AB 03               JP   $
03AE   7E                     LD   A,(HL)   ; str len ; A = char
03AF                          ;*Macro unroll:  _endIf
03AF                          ;*Macro unroll:  _endIf
03AF                          ;*Macro unroll:  _push 0                             ; str len num(0)
03AF   CD 42 06               CALL   dup   ; str len num(0)
03B2   01 00 00               LD   BC,0
03B5                          ;*Macro unroll:  _do
03B5   18 03                  JR   L_M_999
03B7   C3 B7 03               JP   $
03BA                L_M_999:
03BA   CD 42 06               CALL   dup
03BD   4F                     LD   C,A   ; str len num char
03BE   CD 33 04               CALL   charToDigit   ; str len num nib
03C1   CD 42 06               CALL   dup   ; str len num nib nib
03C4   CD 60 04               CALL   isValidDigit   ; str len num nib bool
03C7                          ;*Macro unroll:  _ifZero                         ; str len num nib
03C7   CD 8B 06               CALL   isZero   ; str len num nib
03CA   CA D0 03               JP   z,L_M_1005
03CD   C3 CD 03               JP   $
03D0                L_M_1005:
03D0   CD 69 06               CALL   nip   ; str len nib
03D3   CD 69 06               CALL   nip   ; str nib
03D6   CD 4D 06               CALL   drop   ; str
03D9   01 00 00               LD   BC,0   ; 0
03DC                          ;*Macro unroll:  _push 1                     ; 0 1
03DC   CD 42 06               CALL   dup   ; 0 1
03DF   01 01 00               LD   BC,1
03E2   C9                     RET
03E3                          ;*Macro unroll:  _endIf
03E3   CD C6 02               CALL   plus   ; str len num (num += A)
03E6   CD 6E 06               CALL   swap   ; str num len
03E9   0B                     DEC   BC   ; str num len (len--)
03EA   CD 42 06               CALL   dup   ; str num len len
03ED   CD 8B 06               CALL   isZero   ; str num len
03F0   CD 6E 06               CALL   swap   ; str len num
03F3                          ;*Macro unroll:  _until z
03F6                          ;*Macro unroll:  _push (numberBase)              ; str len num base
03F6   CD 42 06               CALL   dup   ; str len num base
03F9   ED 4B CF 21            LD   BC,(numberBase)
03FD   CD 96 02               CALL   uMultiply   ; str len num num2 (num *= BASE)
0400   CD 4D 06               CALL   drop   ; str len num
0403   23                     INC   HL
0404   7E                     LD   A,(HL)   ; a = next char
0405                          ;*Macro unroll:  _enddo
0408   CD 69 06               CALL   nip   ; str num
040B   CD 6E 06               CALL   swap   ; num str
040E   0A                     LD   A,(BC)
040F   FE 2D                  CP   "-"
0411   CD 4D 06               CALL   drop   ; num
0414                          ;*Macro unroll:  _if z
0414   CA 1A 04               JP   z,L_M_1031
0417   C3 17 04               JP   $
041A                L_M_1031:
041A   CD 59 02               CALL   negate   ; num
041D                          ;*Macro unroll:  _endif
041D                          ;*Macro unroll:  _push 0                             ; num 0
041D   CD 42 06               CALL   dup   ; num 0
0420   01 00 00               LD   BC,0
0423   C9                     RET
0424                DIGITTOCHAR:      ; n -- a
0424   3E 30                  LD   A,$30
0426   81                     ADD   A,C   ; convert TOS digit to ASCII
0427   FE 3A                  CP   $3A
0429                          ;*Macro unroll:  _if nc
0429   D2 2F 04               JP   nc,L_M_1040
042C   C3 2C 04               JP   $
042F                L_M_1040:
042F   C6 07                  ADD   A,7
0431                          ;*Macro unroll:  _endif
0431   4F                     LD   C,A
0432   C9                     RET
0433                CHARTODIGIT:      ; char -- numOrError ; error = -1
0433   79                     LD   A,C
0434   06 00                  LD   B,0
0436   D6 30                  SUB   "0"   ; < "0"?
0438                          ;*Macro unroll:  _if nc                              ; invalid char, end of number
0438   D2 3E 04               JP   nc,L_M_1049   ; invalid char, end of number
043B   C3 3B 04               JP   $
043E                L_M_1049:
043E   FE 0A                  CP   10   ; <= "9"?
0440                          ;*Macro unroll:  _if c
0440   DA 46 04               JP   c,L_M_1051
0443   C3 43 04               JP   $
0446                L_M_1051:
0446   4F                     LD   C,A
0447   B7                     OR   A   ; clear carry flag
0448                          ;*Macro unroll:  _else
0448   C3 48 04               JP   $
044B   D6 11                  SUB   17   ; < "A"? (17 is "A"-"0")
044D                          ;*Macro unroll:  _if nc
044D   D2 53 04               JP   nc,L_M_1056
0450   C3 50 04               JP   $
0453                L_M_1056:
0453   C6 0A                  ADD   A,10
0455   4F                     LD   C,A
0456                          ;*Macro unroll:  _endif
0456                          ;*Macro unroll:  _endif
0456                          ;*Macro unroll:  _endif
0456                          ;*Macro unroll:  _if c
0456   DA 5C 04               JP   c,L_M_1062
0459   C3 59 04               JP   $
045C                L_M_1062:
045C   01 FF FF               LD   BC,-1
045F                          ;*Macro unroll:  _endIf
045F   C9                     RET
0460                             ; is in range 0 - BASE
0460                ISVALIDDIGIT:      ; n -- b
0460   CB 78                  BIT   7,B
0462                          ;*Macro unroll:  _if nz
0462   C2 68 04               JP   nz,L_M_1069
0465   C3 65 04               JP   $
0468                L_M_1069:
0468   01 00 00               LD   BC,0
046B                          ;*Macro unroll:  _else
046B   C3 6B 04               JP   $
046E   79                     LD   A,C
046F   ED 4B CF 21            LD   BC,(numberBase)
0473   B9                     CP   C
0474   CD E8 02               CALL   carryToBool
0477                          ;*Macro unroll:  _endIf
0477   C9                     RET
0478                PARSEWORD:      ; -- ptr len
0478   CD 42 06               CALL   dup   ; dup delim
047B   CD 82 04               CALL   skipDelims
047E   CD DE 04               CALL   wordRead
0481   C9                     RET
0482                SKIPDELIMS:      ; delim -- char
0482                          ;*Macro unroll:  _do
0482   18 03                  JR   L_M_1084
0484   C3 84 04               JP   $
0487                L_M_1084:
0487   CD 7A 01               CALL   getKey   ; get next key, returned in A
048A                          ;*Macro unroll:  _switch
048A   18 03                  JR   L_M_1086
048C   C3 8C 04               JP   $
048F                L_M_1086:
048F   CB 7F                  BIT   7,A   ; check end of input, used by tests
0491                          ;*Macro unroll:  _if nz
0491   C2 97 04               JP   nz,L_M_1088
0494   C3 94 04               JP   $
0497                L_M_1088:
0497   3E 00                  LD   A,0
0499                          ;*Macro unroll:  _break
049C                          ;*Macro unroll:  _endif
049C   FE 5C                  CP   $5C   ; \ start of a comment?
049E                          ;*Macro unroll:  _case z                     ; if yes skip to end of line
049E   CA A4 04               JP   z,L_M_1093   ; if yes skip to end of line
04A1   C3 A1 04               JP   $
04A4                L_M_1093:
04A4                          ;*Macro unroll:  _do
04A4   18 03                  JR   L_M_1094
04A6   C3 A6 04               JP   $
04A9                L_M_1094:
04A9   CD 7A 01               CALL   getKey
04AC   FE 0D                  CP   "\r"   ; end of line yet?
04AE                          ;*Macro unroll:  _if nz
04AE   C2 B4 04               JP   nz,L_M_1097
04B1   C3 B1 04               JP   $
04B4                L_M_1097:
04B4   FE 0A                  CP   "\n"   ; end of line yet?
04B6                          ;*Macro unroll:  _endif
04B6                          ;*Macro unroll:  _until z
04B9                          ;*Macro unroll:  _enddo
04BC                          ;*Macro unroll:  _endcase
04BF   B9                     CP   C   ; = space?
04C0                          ;*Macro unroll:  _case z
04C0   CA C6 04               JP   z,L_M_1104
04C3   C3 C3 04               JP   $
04C6                L_M_1104:
04C6                          ;*Macro unroll:  _endcase
04C9   FE 20                  CP   " "   ; < space?
04CB                          ;*Macro unroll:  _case c
04CB   DA D1 04               JP   c,L_M_1107
04CE   C3 CE 04               JP   $
04D1                L_M_1107:
04D1                          ;*Macro unroll:  _endcase
04D4                             ; default case
04D4                          ;*Macro unroll:  _break
04D7                          ;*Macro unroll:  _endswitch
04D7                          ;*Macro unroll:  _enddo
04DA                          ;*Macro unroll:  _poke 0,A                           ; TOS = char
04DA   4F                     LD   C,A   ; TOS = char
04DB   06 00                  LD   B,0
04DD   C9                     RET
04DE                             ; destroys: DE, HL
04DE                WORDREAD:      ; ptr maxlen delim char -- ptr len
04DE   79                     LD   A,C   ;
04DF   CD 4D 06               CALL   drop   ; ptr maxlen delim  ; A = char
04E2   59                     LD   E,C   ;
04E3   CD 4D 06               CALL   drop   ; ptr maxlen        ; E = delim
04E6   51                     LD   D,C   ;
04E7   CD 58 06               CALL   dropdup   ; ptr ptr           ; D = maxlen
04EA   B7                     OR   A   ; A = 0 ?
04EB                          ;*Macro unroll:  _if z
04EB   CA F1 04               JP   z,L_M_1124
04EE   C3 EE 04               JP   $
04F1                L_M_1124:
04F1   01 00 00               LD   BC,0   ; ptr len           ; where len = 0
04F4                          ;*Macro unroll:  _else
04F4   C3 F4 04               JP   $
04F7                          ;*Macro unroll:  _do
04F7   18 03                  JR   L_M_1127
04F9   C3 F9 04               JP   $
04FC                L_M_1127:
04FC   02                     LD   (BC),A   ; write char to lineBuf
04FD   03                     INC   BC   ; ptr ptr'
04FE   CD 7A 01               CALL   getKey   ; get next key
0501   BB                     CP   E   ; = delim?
0502                          ;*Macro unroll:  _until z
0505   FE 20                  CP   " "   ; < space? i.e. control chars
0507                          ;*Macro unroll:  _until c
050A   15                     DEC   D
050B                          ;*Macro unroll:  _until z
050E                          ;*Macro unroll:  _enddo
0511                          ;*Macro unroll:  _peek H,L                       ; HL = ptr'
0511   69                     LD   L,C   ; HL = ptr'
0512   60                     LD   H,B
0513   CD 58 06               CALL   dropdup   ; ptr ptr
0516   B7                     OR   A
0517   ED 42                  SBC   HL,BC   ; ptr' - ptr
0519                          ;*Macro unroll:  _poke  H,L                      ; ptr len
0519   4D                     LD   C,L   ; ptr len
051A   44                     LD   B,H
051B                          ;*Macro unroll:  _endif
051B   C9                     RET
051C                          ;*Macro unroll: defword "ok", 0, OK
051C                HEADER_OK:
051C   F3 02                  DW   backLink
051E                BACKLINK:   .SET   HEADER_OK
051E   00                     DB   0
051F   02 6F 6B               .PSTR   "ok"
0522                OK:
0522                          ;*Macro unroll:  _pushPStr "OK"
0522                          ;*Macro unroll:  _push tpt_textM_1146
0522   CD 42 06               CALL   dup
0525   01 2E 05               LD   BC,tpt_textM_1146
0528   01 2E 05               LD   BC,tpt_textM_1146
052B                          ;*Macro unroll:  _skip
052B   C3 2B 05               JP   $
052E                TPT_TEXTM_1146:
052E   02 4F 4B               .PSTR   "OK"
0531                          ;*Macro unroll:  _endskip
0531   CD 65 05               CALL   printPStr
0534   C9                     RET
0535                PRINTCR:      ; --
0535   3E 0D                  LD   A,"\r"
0537   CD EE 05               CALL   putc
053A   3E 0A                  LD   A,"\n"
053C   CD EE 05               CALL   putc
053F   C9                     RET
0540                             ; destroys: HL
0540                PRINTSTR:      ; ptr len --
0540                          ;*Macro unroll:  _nipInto H,L
0540   DD 2B                  DEC   IX
0542   DD 2B                  DEC   IX
0544   DD 66 01               LD   H,(IX+1)
0547   DD 6E 00               LD   L,(IX+0)
054A                PRINTSTR1:
054A                          ;*Macro unroll:  _do
054A   18 03                  JR   L_M_1159
054C   C3 4C 05               JP   $
054F                L_M_1159:
054F   7E                     LD   A,(HL)
0550   CD EE 05               CALL   putc
0553   23                     INC   HL
0554   0B                     DEC   BC
0555   CD 42 06               CALL   dup
0558                          ;*Macro unroll:  _untilZero
0558   CD 8B 06               CALL   isZero
055E                          ;*Macro unroll:  _enddo
0561   CD 4D 06               CALL   drop   ; clear TOS
0564   C9                     RET
0565                             ; destroys: HL
0565                PRINTPSTR:      ; _ptr --
0565                          ;*Macro unroll:  _peek H,L
0565   69                     LD   L,C
0566   60                     LD   H,B
0567                          ;*Macro unroll:  _poke 0,(HL)
0567   4E                     LD   C,(HL)
0568   06 00                  LD   B,0
056A   23                     INC   HL
056B   18 DD                  JR   printStr1
056D                             ; destroys: HL
056D                          ;*Macro unroll: defword ".", 0, printNum                    ; num --
056D                HEADER_PRINTNUM:      ; num --
056D   1C 05                  DW   backLink
056F                BACKLINK:   .SET   HEADER_printNum
056F   00                     DB   0
0570   01 2E                  .PSTR   "."
0572                PRINTNUM:
0572   21 4D 21               LD   HL,wordBuf1
0575                          ;*Macro unroll:  _tuckFrom H,L                           ; ptr num
0575   DD 75 00               LD   (IX+0),L   ; ptr num
0578   DD 74 01               LD   (IX+1),H
057B   DD 23                  INC   IX
057D   DD 23                  INC   IX
057F   CD 00 03               CALL   formatNum
0582   CD 40 05               CALL   printStr
0585   3E 20                  LD   A," "
0587   CD EE 05               CALL   putc
058A   C9                     RET
058B                SER_EMPTYSIZE:   EQU   5
058B                SER_FULLSIZE:   EQU   30H
058B                IO_CTRL:   EQU   $80
058B                IO_DATA:   EQU   $81
058B                RTS_HIGH:   EQU   $D6   ; 11010110
058B                RTS_LOW:   EQU   $96   ; 10010110
058B                PORT_STATUS:   EQU   $04
058B                PORT_DATA:   EQU   $03
058B                             ; destroys: HL
058B                INITSERIAL:
058B   21 00 00               LD   HL,0
058E   22 84 20               LD   (serbufused),HL
0591   21 86 20               LD   HL,serbuf
0594   22 80 20               LD   (serinptr),HL
0597   22 82 20               LD   (serrdptr),HL
059A                          IF   SERIALMODE = 6850
059A   3E 96                  LD   A,RTS_LOW
059C   D3 80                  OUT   (IO_CTRL),A
059E                          ENDIF
059E   ED 56                  IM   1
05A0   FB                     EI
05A1   C9                     RET
05A2                SERIALIN:
05A2   F5                     PUSH   AF
05A3   E5                     PUSH   HL
05A4                          IF   SERIALMODE = 6850
05A4   DB 80                  IN   A,(IO_CTRL)
05A6   E6 01                  AND   $01
05A8                          ;*Macro unroll:  _if nz
05A8   C2 AE 05               JP   nz,L_M_1212
05AB   C3 AB 05               JP   $
05AE                L_M_1212:
05AE   DB 81                  IN   A,(IO_DATA)
05B0   CD B7 05               CALL   serialIn2
05B3                          ;*Macro unroll:  _endif
05B3                          ELSE
                              ;*Macro unroll:  _do
                              JR   L_M_1217
                              JP   $
                    L_M_1217:
                              IN   A,(PORT_STATUS)
                              BIT   1,A
                              ;*Macro unroll:  _until z
                              ;*Macro unroll:  _enddo
                              IN   A,(PORT_DATA)
                              CALL   serialIn2
05B3                          ENDIF
05B3   E1                     POP   HL
05B4   F1                     POP   AF
05B5   FB                     EI
05B6   C9                     RET
05B7                             ; destroys: HL
05B7                SERIALIN2:
05B7   F5                     PUSH   AF
05B8   3A 84 20               LD   A,(serBufUsed)
05BB   FE 3F                  CP   SER_BUFSIZE
05BD                          ;*Macro unroll:  _if z
05BD   CA C3 05               JP   z,L_M_1234
05C0   C3 C0 05               JP   $
05C3                L_M_1234:
05C3   F1                     POP   AF
05C4   C9                     RET
05C5                          ;*Macro unroll:  _endif
05C5   2A 80 20               LD   HL,(serInPtr)
05C8   23                     INC   HL
05C9   7D                     LD   A,L   ; Only need to check low byte becasuse lineBuf<256 bytes
05CA   FE C5                  CP   (serBuf + SER_BUFSIZE) & $FF
05CC                          ;*Macro unroll:  _if z
05CC   CA D2 05               JP   z,L_M_1242
05CF   C3 CF 05               JP   $
05D2                L_M_1242:
05D2   21 86 20               LD   HL,serBuf
05D5                          ;*Macro unroll:  _endif
05D5   22 80 20               LD   (serInPtr),HL
05D8   F1                     POP   AF
05D9   77                     LD   (HL),A
05DA   3A 84 20               LD   A,(serBufUsed)
05DD   3C                     INC   A
05DE   32 84 20               LD   (serBufUsed),A
05E1                          IF   SERIALMODE = 6850
05E1   FE 30                  CP   SER_FULLSIZE
05E3                          ;*Macro unroll:  _if nc
05E3   D2 E9 05               JP   nc,L_M_1253
05E6   C3 E6 05               JP   $
05E9                L_M_1253:
05E9   3E D6                  LD   A,RTS_HIGH
05EB   D3 80                  OUT   (IO_CTRL),A
05ED                          ;*Macro unroll:  _endif
05ED                          ENDIF
05ED   C9                     RET
05EE                             ;
05EE                             ; putc - output a character
05EE                             ; params: A = char to output
05EE                             ;
05EE                PUTC:
05EE                          IF   SERIALMODE = 6850
05EE   F5                     PUSH   AF   ; Store character
05EF                          ;*Macro unroll:  _do
05EF   18 03                  JR   L_M_1266
05F1   C3 F1 05               JP   $
05F4                L_M_1266:
05F4   DB 80                  IN   A,(IO_CTRL)   ; Status byte
05F6   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
05F8                          ;*Macro unroll:  _until nz
05FB                          ;*Macro unroll:  _enddo
05FE   F1                     POP   AF   ; Retrieve character
05FF   D3 81                  OUT   (IO_DATA),A   ; Output the character
0601                          ELSE
                              PUSH   AF   ; Store character
                              ;*Macro unroll:  _do
                              JR   L_M_1275
                              JP   $
                    L_M_1275:
                              IN   A,(PORT_STATUS)   ; Status byte
                              BIT   0,A   ; Set Zero flag if still transmitting character
                              ;*Macro unroll:  _until nz
                              ;*Macro unroll:  _enddo
                              POP   AF   ; Retrieve character
0601                          ENDIF
0601   C9                     RET
0602                             ;
0602                             ; serReady - check if there is input waiting to be read
0602                             ; flags: NZ if input ready
0602                             ;
0602                SERREADY:
0602   3A 84 20               LD   A,(serBufUsed)
0605   FE 00                  CP   $0
0607   C9                     RET
0608                             ;
0608                             ; getc - input
0608                             ; returns: A = input char
0608                             ;
0608                GETC:
0608   E5                     PUSH   HL
0609                          IF   TESTMODE
                              LD   HL,(charPtr)
                              LD   A,(HL)
                              INC   HL
                              LD   (charPtr),HL
0609                          ELSE
0609                          ;*Macro unroll:  _do
0609   18 03                  JR   L_M_1303
060B   C3 0B 06               JP   $
060E                L_M_1303:
060E   CD 02 06               CALL   serReady
0611                          ;*Macro unroll:  _until nz
0614                          ;*Macro unroll:  _enddo
0617   2A 82 20               LD   HL,(serRdPtr)
061A   23                     INC   HL
061B   7D                     LD   A,L   ; Only need to check low byte because lineBuf<256 bytes
061C   FE C5                  CP   (serBuf + SER_BUFSIZE) & $FF
061E                          ;*Macro unroll:  _if z
061E   CA 24 06               JP   z,L_M_1311
0621   C3 21 06               JP   $
0624                L_M_1311:
0624   21 86 20               LD   HL,serBuf
0627                          ;*Macro unroll:  _endif
0627   F3                     DI
0628   22 82 20               LD   (serRdPtr),HL
062B   3A 84 20               LD   A,(serBufUsed)
062E   3D                     DEC   A
062F   32 84 20               LD   (serBufUsed),A
0632                          IF   SERIALMODE = 6850
0632   FE 05                  CP   SER_EMPTYSIZE
0634                          ;*Macro unroll:  _if c
0634   DA 3A 06               JP   c,L_M_1321
0637   C3 37 06               JP   $
063A                L_M_1321:
063A   3E 96                  LD   A,RTS_LOW
063C   D3 80                  OUT   (IO_CTRL),A
063E                          ;*Macro unroll:  _endif
063E                          ENDIF
063E   7E                     LD   A,(HL)
063F   FB                     EI
0640                          ENDIF
0640   E1                     POP   HL
0641   C9                     RET
0642                             ; duplicate top of data stack
0642                             ; x1 -- x1 x1
0642                DUP:
0642   DD 71 00               LD   (IX+0),C   ; PUSH register pair
0645   DD 70 01               LD   (IX+1),B
0648   DD 23                  INC   IX
064A   DD 23                  INC   IX
064C   C9                     RET
064D                             ; remove top of data stack
064D                             ; x1 x2 -- x1
064D                DROP:
064D   DD 2B                  DEC   IX   ; POP register pair
064F   DD 2B                  DEC   IX
0651                          ;*Macro unroll:  _poke (IX+1),(IX+0)
0651   DD 4E 00               LD   C,(IX+0)
0654   DD 46 01               LD   B,(IX+1)
0657   C9                     RET
0658                             ; copy memory  to BC
0658                             ; x y -- x x;
0658                DROPDUP:
0658                          ;*Macro unroll:  _poke (IX-1),(IX-2)
0658   DD 4E FE               LD   C,(IX-2)
065B   DD 46 FF               LD   B,(IX-1)
065E   C9                     RET
065F                             ; duplicate second from top of data stack
065F                             ; x1 x2 -- x1 x2 x1
065F                OVER:
065F   CD 42 06               CALL   dup
0662                          ;*Macro unroll:  _poke (IX-3),(IX-4)
0662   DD 4E FC               LD   C,(IX-4)
0665   DD 46 FD               LD   B,(IX-3)
0668   C9                     RET
0669                NIP:
0669   DD 2B                  DEC   IX
066B   DD 2B                  DEC   IX
066D   C9                     RET
066E                SWAP:
066E                          ;*Macro unroll:  _alter2 -2,C
066E   DD 7E FE               LD   A,(IX+-2)
0671   DD 71 FE               LD   (IX+-2),C
0674   4F                     LD   C,A
0675                          ;*Macro unroll:  _alter2 -1,B
0675   DD 7E FF               LD   A,(IX+-1)
0678   DD 70 FF               LD   (IX+-1),B
067B   47                     LD   B,A
067C   C9                     RET
067D                DUP2:        ; xa xb -- xa xb xa xb
067D   CD 5F 06               CALL   over
0680   CD 5F 06               CALL   over
0683   C9                     RET
0684                DROP2:       ; x x --
0684   CD 69 06               CALL   nip
0687   CD 4D 06               CALL   drop
068A   C9                     RET
068B                ISZERO:      ; n -- ?  ; this is wrong, should leave boolean
068B                          ;*Macro unroll:  _compareZero B,C
068B   79                     LD   A,C
068C   B0                     OR   B
068D   CD 4D 06               CALL   drop
0690   C9                     RET
0691                             ; depth of data stack
0691                             ; destroys: HL
0691                          ;*Macro unroll: defword "depth", 0, depth                       ; -- n
0691                HEADER_DEPTH:      ; -- n
0691   6D 05                  DW   backLink
0693                BACKLINK:   .SET   HEADER_depth
0693   00                     DB   0
0694   05 64 65 70 74 68      .PSTR   "depth"
069A                DEPTH:
069A                             ; push IX
069A                             ; pop BC
069A                             ; _push dataStack
069A                             ; call minus
069A                             ; _div2
069A                             ; ret
069A   DD E5                  PUSH   IX
069C   E1                     POP   HL
069D   CD 42 06               CALL   dup
06A0   01 00 20               LD   BC,dataStack
06A3   B7                     OR   A
06A4   ED 42                  SBC   HL,BC
06A6                          ;*Macro unroll:  _poke  H,L
06A6   4D                     LD   C,L
06A7   44                     LD   B,H
06A8                          ;*Macro unroll:  _div2
06A8   CB 38                  SRL   B
06AA   CB 19                  RR   C
06AC   C9                     RET
06AD                             ; destroys: HL
06AD                FETCH:       ; ptr -- n
06AD                          ;*Macro unroll:  _peek H,L
06AD   69                     LD   L,C
06AE   60                     LD   H,B
06AF   4E                     LD   C,(HL)
06B0   23                     INC   HL
06B1   46                     LD   B,(HL)
06B2   C9                     RET
06B3                             ; destroys: HL
06B3                STORE:       ; n ptr --
06B3                          ;*Macro unroll:  _peek H,L
06B3   69                     LD   L,C
06B4   60                     LD   H,B
06B5   CD 4D 06               CALL   drop
06B8   71                     LD   (HL),C
06B9   23                     INC   HL
06BA   70                     LD   (HL),B
06BB   CD 4D 06               CALL   drop
06BE   C9                     RET
06BF                             ; destroys: HL
06BF                STORECHAR:      ; c ptr --
06BF                          ;*Macro unroll:  _peek H,L
06BF   69                     LD   L,C
06C0   60                     LD   H,B
06C1   CD 4D 06               CALL   drop
06C4   71                     LD   (HL),C
06C5   CD 4D 06               CALL   drop
06C8   C9                     RET
06C9                             ; destroys: DE, HL
06C9                COMPARESTR:      ; str1 str2 len -- (-1|0|1)
06C9                          ;*Macro unroll:  _nipInto H,L
06C9   DD 2B                  DEC   IX
06CB   DD 2B                  DEC   IX
06CD   DD 66 01               LD   H,(IX+1)
06D0   DD 6E 00               LD   L,(IX+0)
06D3                          ;*Macro unroll:  _nipInto D,E
06D3   DD 2B                  DEC   IX
06D5   DD 2B                  DEC   IX
06D7   DD 56 01               LD   D,(IX+1)
06DA   DD 5E 00               LD   E,(IX+0)
06DD   CD 42 06               CALL   dup
06E0   CD 8B 06               CALL   isZero   ; test for Count=0
06E3   C8                     RET   z
06E4                          ;*Macro unroll:  _do
06E4   18 03                  JR   L_M_1425
06E6   C3 E6 06               JP   $
06E9                L_M_1425:
06E9   1A                     LD   A,(DE)
06EA   13                     INC   DE
06EB   ED A1                  CPI
06ED                          ;*Macro unroll:  _if nz                          ; char mismatch: exit
06ED   C2 F3 06               JP   nz,L_M_1429   ; char mismatch: exit
06F0   C3 F0 06               JP   $
06F3                L_M_1429:
06F3   2B                     DEC   HL   ; point at mismatch char
06F4   BE                     CP   (HL)   ; set carry if char1 < char2
06F5                          ;*Macro unroll:  _if c
06F5   DA FB 06               JP   c,L_M_1432
06F8   C3 F8 06               JP   $
06FB                L_M_1432:
06FB   01 FF FF               LD   BC,-1
06FE                          ;*Macro unroll:  _else
06FE   C3 FE 06               JP   $
0701   01 01 00               LD   BC,1
0704                          ;*Macro unroll:  _endif
0704   C9                     RET
0705                          ;*Macro unroll:  _endif
0705                          ;*Macro unroll:  _until po
0708                          ;*Macro unroll:  _enddo
070B   01 00 00               LD   BC,0   ; count exhausted & no mismatch found
070E   C9                     RET
070F                INITIALLATEST:
070F   91 06                  DW   backLink
2000                          .ORG   START_RAM
2000                             ;
2000                             ; variables
2000                             ;
2000                             ; storage locations declared in RAM
2000                             ;
2000                DATASTACK:   DS   PARAM_STACK_SIZE
2080   00 00        SERINPTR:   DW   0
2082   00 00        SERRDPTR:   DW   0
2084   00 00        SERBUFUSED:   DW   0
2086                SERBUF:   DS   SER_BUFSIZE
20C5   00 00        LINEBUFSTART:   DW   0
20C7   00 00        LINEBUFSIZE:   DW   0
20C9   00 00        CURRKEY:   DW   0
20CB   00 00        LINEBUFTOP:   DW   0
20CD                LINEBUF:   DS   LINE_BUFSIZE
214D                             ; A static lineBuf TOKEN fills.  Subsequent calls
214D                             ; overwrite this lineBuf.  Maximum word length is 32 chars.
214D                WORDBUF1:   DS   64
218D                WORDBUF2:   DS   64
21CD   00 00        NESTLEVEL:   DW   0
21CF   00 00        NUMBERBASE:   DW   0
21D1   00 00        LATESTDEF:   DW   0
21D3                          IF   TESTMODE
                                 ; used for mocking getc
                    CHARPTR:   DW   0
21D3                          ENDIF
21D3                START_USER:
