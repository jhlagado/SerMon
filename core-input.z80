initInput:
            ld HL, linebuf
            ld (lineBufStart), HL
            ld (currkey), HL
            ld (linebuftop), HL
            ld HL, LINE_BUFSIZE
            ld (lineBufSize), HL
            ret

            CODE "KEY",0,KEY
            call getKey
            call dup
            _setTOS 0,A
            ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; getKey -  inputs a line buffered character
; params: none
; returns: A = character,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

getKey:
            push HL
            push DE
            push BC
            ld HL, (currkey)
            ld DE, (lineBufTop)
            or A
            sbc HL, DE                  ; exhausted the input lineBuf?
            jr c,getKey1
            ld HL, (lineBufStart)   ; lineBuf
            ld DE, (lineBufSize)    ; LINE_BUFSIZE
            call getline
            ld HL, lineBuf
            ld (currkey), HL
            or A
            adc HL, BC              ; lineBuf+DE = lineBufTop
            ld (lineBufTop),HL
getKey1:
            ld HL, (currkey)
            ld A,(HL)               ; get next key from input lineBuf
            inc HL
            ld (currkey),HL         ; increment currkey
            pop BC
            pop DE
            pop HL
            ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; getline - input line of text ***
; params: HL = addr, DE = max (currently up to 255)
; returns: BC = length - up to 255
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
getline:
            push AF
            push HL
            _pushPStr "\r\n> "
            call printPStr
            pop HL
            push HL
            ld BC, 0
getline1:    
getline2:
            call getc
            cp $08
            jr nz,getline4
            call dup
            call isZero
            jr z,getline3
            dec HL
            dec BC
            ld a, $08
            call putc
            ld A," "
            call putc
            ld A, $08
            call putc
getline3:
            jr getline6
getline4:
            ld (HL), A
            inc HL
            inc BC
            bit 7,a
            jr nz,getline5
            call putc
getline5:
            cp "\r"
            jr z, getline8
            cp "\n"
            jr z, getline8
            ld A, E
            cp C
            jr c, getline8
getline6:
            jr getline2
getline7:
getline8:
            ld a, 0
            cp c
            jr z,getline1
            pop AF
            pop HL
            call printCR
            ret
