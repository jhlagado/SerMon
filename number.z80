defword "formatNum", 0, formatNum       ; ptr num -- ptr len
    call over                               ; ptr num ptr
    call swap                               ; ptr ptr num
    _isNegative                         ; Detect sign of num
    _if nz
        call negate                     ; ptr ptr num1
        call swap                           ; ptr num1 ptr ptr
        _pushChar '-'                   ; ptr num1 ptr '-'
        call over                           ; ptr num1 ptr '-' ptr
        call storeChar                      ; ptr num1 ptr
        inc BC                          ; ptr num1 ptr'
        call swap                           ; ptr ptr' num1
    _endif
    _push (numberBase)                  ; ptr ptr' num1 base
    call swap                               ; ptr ptr' base num1
    ld D, 0                             ; D counter
    _do
        inc D
        call over                           ; ptr ptr' base num1 base
        call divide                     ; ptr ptr' base num2 rem
        _toRetStack                     ; ptr ptr' base num2
        call dup                            ; ptr ptr' base num2 num2
    _untilZero
    _enddo
    call drop2                              ; ptr ptr'
    _do
        _fromRetStack                   ; ptr ptr' digit
        call toAscii                    ; ptr ptr' ascii
        call over                           ; ptr ptr' ascii ptr'
        call storeChar                      ; ptr ptr'
        inc BC                          ; ptr ptr''
        dec D
    _until z
    _enddo
    call over                               ; ptr ptr'' ptr
    call minus                          ; ptr len
    ret

toAscii:                                ; n -- a
    ld A,$30
    add A,C                             ; convert TOS digit to ASCII
    cp $3A
    _if nc
        add A,7
    _endif
    ld C,A
    ret

toNumber:                               ; str len -- num err
    call dup                                ; str len len
    _ifZero                             ; if zero then return 0 0
        call nip                            ; zero
        call dup                            ; zero zero
        ret                             ; -- 0 0
    _endif
    _overInto H,L                       ; str len ; HL = str
    ld A,(HL)                           ; A = char
    cp '-'                              ; is A negative number?
    _if z
        inc HL
        dec BC                          ; str len
        call dup                            ; str len len
        _ifZero
            call nip                        ; zero
            call dup                        ; zero zero
            ld BC,1
            ret                         ; 0 1
        _else
            ld A,(HL)                   ; str len ; A = char
        _endIf
    _endIf
    _push 0                             ; str len num(0)
    _do
        call dup
        ld C,A                          ; str len num char
        call charToNibble               ; str len num nib
        call dup                            ; str len num nib nib
        call inBaseRange                ; str len num nib bool
        _ifZero                         ; str len num nib
            call nip                    ; str len nib
            call nip                    ; str nib
            call drop                   ; str
            ld BC,0                     ; 0
            _push 1                     ; 0 1
            ret
        _endIf
        call plus                       ; str len num (num += A)
        call swap                           ; str num len
        dec BC                          ; str num len (len--)
        call dup                            ; str num len len
        call isZero                         ; str num len
        call swap                           ; str len num
    _until z
        _push (numberBase)              ; str len num base
        call uMultiply                  ; str len num num2 (num *= BASE)
        call drop                           ; str len num
        inc HL
        ld A,(HL)                       ; a = next char
    _enddo
    call nip                                ; str num
    call swap                               ; num str
    ld A,(BC)
    cp "-"
    call drop                               ; num
    _if z
        call negate                     ; num
    _endif
    _push 0                             ; num 0
    ret

charToNibble:                           ; char -- num ; err = -1
    ld A,C
    ld B,0
    sub '0'                             ; < '0'?
    _if nc                              ; invalid char, end of number
        cp 10                           ; <= '9'?
        _if c
            ld C,A
            or A                        ; clear carry flag
        _else
            sub 17                      ; < 'A'? (17 is 'A'-'0')
            _if nc
                add A,10
                ld C,A
            _endif
        _endif
    _endif
    _if c
        ld BC,-1
    _endIf
    ret

inBaseRange:                            ; is in range 0 - BASE
    bit 7,B
    _if nz
        ld BC,0
    _else
        ld A,C
        ld BC, (numberBase)
        cp C
        call carryToBool
    _endIf
    ret

