defword "formatNum", 0, formatNum       ; ptr num -- ptr len
    _overInto H,L                       ; HL = ptr, BC = num
    _tuckFrom H,L                       ; ptr ptr num
    bit 7, B                            ; Detect sign of HL.
    _if nz
        call negate                     ; ptr ptr num1
        _swap                           ; ptr num1 ptr
        ld A, '-'                       ; Output '-' to string and negate HL.
        ld (BC),A
        inc BC
        _swap                           ; ptr ptr' num1
    _endif
    _pushValue (numberBase)               ; ptr ptr' num1 base
    _swap                               ; ptr ptr' base num1
    ld D, 0                             ; D counter
    _do
        inc D
        _over                           ; ptr ptr' base num1 base
        push DE
        call divide                     ; ptr ptr' base num2 rem
        pop DE
        _toRetStack                     ; ptr ptr' base num2
        _dup                            ; ptr ptr' base num2 num2
        _isZero                         ; ptr ptr' base num2
    _until z
    _enddo
    _drop2                              ; ptr ptr'
    _do
        _fromRetStack                   ; ptr ptr' digit
        ld A,$30
        add A,C                         ; convert TOS digit to ASCII
        cp $3A
        _if nc
            add A,7
        _endif
        _drop                           ; ptr ptr'
        ld (BC),A
        inc BC
        dec D
    _until z
    _enddo
    _peek H,L                      ; HL = ptr'
    _dropdup                            ; ptr ptr
    or A
    sbc HL, BC
    _poke  H,L                      ; ptr len
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; toNumber -  converts string to number in the ***
; base strored in numberBase
;
; params: HL = string address, BC = string length
; returns: DE = parsed number, BC = 0: success, not 0, uparsed chars
; destroys: AF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

toNumber:                               ; str len -- num err
    _dup                                ; str len len
    _isZero                             ; if zero then return 0 0
    _if z                               ; str zero
        _nip                            ; zero
        _dup                            ; zero zero
        ret                             ; -- 0 0
    _endif
    _overInto H,L                       ; str len ; HL = str
    ld A,(HL)                           ; A = char
    cp '-'                              ; is A negative number?
    _if z
        inc HL
        dec BC                          ; str len
        _dup                            ; str len len
        _isZero
        _if z                           ; str zero
            _nip                        ; zero
            _dup                        ; zero zero
            ld BC,1
            ret                         ; 0 1
        _else
            ld A,(HL)                   ; str len ; A = char
        _endIf
    _endIf
    _pushValue 0                        ; str len num(0)
    _do
        _dup
        ld C,A                          ; str len num char
        call charToNibble               ; str len num nib
        _dup                            ; str len num nib nib
        call inBaseRange                ; str len num nib bool
        _ifZero                         ; str len num nib
            _drop3                      ; str
            ld BC,0                     ; 0
            _pushValue 1                ; 0 1
            ret
        _endIf
        ld A,C
        _drop
        add A,C                         ; str len num (num += A)
        ld C,A
        xor A
        adc A,B
        ld B,A
        _swap                           ; str num len
        dec BC                          ; str num len (len--)
        _dup                            ; str num len len
        _isZero                         ; str num len
        _swap                           ; str len num
    _until z
        _dup                            ; str len num num
        ld BC, (numberBase)               ; str len num base
        push HL
        call uMultiply           ; str len num num2 (num *= BASE)
        pop HL
        _drop                           ; str len num
        inc HL
        ld A,(HL)                       ; a = next char
    _enddo
    _nip                                ; str num
    _swap                               ; num str
    ld A,(BC)
    cp "-"
    _drop                               ; num
    _if z
        call negate                  ; num
    _endif
    _pushValue 0                        ; num 0
    ret

charToNibble:                           ; char -- num ; err = -1
    ld A,C
    ld B,0
    sub '0'                             ; < '0'?
    _if nc                              ; invalid char, end of number
        cp 10                           ; <= '9'?
        _if c
            ld C,A
            or A                        ; clear carry flag
        _else
            sub 17                      ; < 'A'? (17 is 'A'-'0')
            _if nc
                add A,10
                ld C,A
            _endif
        _endif
    _endif
    _if c
        ld BC,-1
    _endIf
    ret

inBaseRange:                            ; is in range 0 - BASE
    bit 7,B
    _if nz
        ld BC,0
    _else
        ld A,C
        ld BC, (numberBase)
        cp C
        call carryToBool
    _endIf
    ret

carryToBool:
    _if nc
        ld BC,0
    _else
        ld BC,-1
    _endif
    ret