; destroys: HL
negate:                                 ; num -- -num
    ld HL,0
    or A
    sbc HL,BC
    _poke  H,L
    ret

; destroys: HL
divide:                                 ; dividend divisor -- quotient remainder
    push DE
    _peek D,E                           ; DE = divisor, BC = dividend
    call drop
    ld HL,0

    ld A,B
    call divide2
    ld B,A

    ld A,C
    ld C,B
    call divide2
    ld B,C
    ld C,A

    call dup
    _poke H,L                           ; TOS = remainder
    pop DE
    ret

divide2:
    ld B,8
    _do
        rla
        adc HL,HL
        sbc HL,DE
        _if c
            add HL,DE
        _endif
    _djnz
    rla
    cpl
    ret

; destroys: DE
uMultiply:                              ; u1 u2 -- plo phi
    push HL
    _peek D,E                           ; u1 u2
    call drop                               ; u1
    ld HL,0
    ld A,17                             ; loop counter
    or A                                ; clear carry
    _do
        rr H
        rr L
        rr D
        rr E
        _if c
            add HL,BC
        _endif
        dec A
    _until z
    _enddo
    _poke  D,E                          ; plo
    call dup                                ; plo phi
    _poke  H,L
    pop HL
    ret

; destroys: HL
plus:                                   ; x y -- z
    _nipInto H,L
    add HL,BC
    _poke H,L
    ret

; destroys: HL
minus:                                   ; x y -- z
    _nipInto H,L
    or A
    sbc HL,BC
    _poke H,L
    ret

carryToBool:
    ld BC,0
    _if c
        dec BC
    _endif
    ret

