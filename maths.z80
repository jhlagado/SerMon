; destroys HL
negate:                              ; num -- -num
    ld HL,0
    or A
    sbc HL,BC
    _load B,C, H,L
    ret

;destroys DE, HL, A
divide:                             ; dividend divisor -- quotient remainder
    _pop D,E                            ; DE = divisor, BC = dividend
    ld HL,0

    ld A,B
    call divide2
    ld B,A

    ld A,C
    ld C,B
    call divide2
    ld B,C
    ld C,A

    _push H,L                           ; TOS = remainder
    ret

divide2:
    ld B,8
    _do
        rla
        adc HL,HL
        sbc HL,DE
        _if c
            add HL,DE
        _endif
    _djnz
    rla
    cpl
    ret

; destroys: AF, HL
uMultiply:                       ; u1 u2 -- plo phi
    _load D,E, B,C                      ; u1 u2
    _drop                               ; u1
    ld HL,0
    ld A,17                             ; loop counter
    or A                                ; clear carry
    _do
        rr H
        rr L
        rr D
        rr E
        _if c
            add HL,BC
        _endif
        dec A
    _until z
    _enddo
    _load B,C, D,E                      ; plo
    _dup                                ; plo phi
    _load B,C, H,L
    ret
