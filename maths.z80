negateNum:                              ; num -- -num
    ld HL,0
    or A
    sbc HL,BC
    loadWord B,C, H,L
    ret

divideWord:                             ; dividend divisor -- quotient remainder
    _pop D,E                        ; DE = divisor, BC = dividend
    ld HL,0

    ld A,B
    call divideWord2
    ld B,A

    ld A,C
    ld C,B
    call divideWord2
    ld B,C
    ld C,A

    _push H,L                       ; TOS = remainder
    ret

divideWord2:
    ld B,8
    _do
        rla
        adc HL,HL
        sbc HL,DE
        _if c
            add HL,DE
        _endif
    _djnz
    rla
    cpl
    ret

