; duplicate top of data stack
; x1 -- x1 x1
dup:
    ld (IX+0), C                            ; PUSH register pair
    ld (IX+1), B
    inc IX
    inc IX
    ret

; remove top of data stack
; x1 x2 -- x1
drop:
    dec IX                                  ; POP register pair
    dec IX
    ld B, (IX+1)
    ld C, (IX+0)
    ret

; copy memory  to BC
; x y -- x x;
dropdup:
    ld B, (IX-1)
    ld C, (IX-2)
    ret

; duplicate second from top of data stack
; x1 x2 -- x1 x2 x1
over:
    _dup
    ld C,(IX-4)
    ld B,(IX-3)
    ret

nip:
    dec IX
    dec IX
    ret

swap:
    push DE
    _alter2 -2,C
    _alter2 -1,B
    pop DE
    ret

dup2:                                       ; xa xb -- xa xb xa xb
    _over
    _over
    ret

drop2:                                      ; x x --
    _nip
    _drop
    ret

isZero:                                     ; n -- b
    _compareZero B,C
    _drop
    ret

; depth of data stack
defword "depth", 0, depth                   ; -- n
    push IX
    pop HL
    _dup
    ld BC,dataStack
    or A
    sbc HL,BC
    _load B,C, H,L
    _div2
    ret

