; duplicate top of data stack
; x1 -- x1 x1
dup:
    ld (IX+0), C                                ; PUSH register pair
    ld (IX+1), B
    inc IX
    inc IX
    ret

; remove top of data stack
; x1 x2 -- x1
drop:
    dec IX                                      ; POP register pair
    dec IX
    _setTOS (IX+1),(IX+0)
    ret

; copy memory  to BC
; x y -- x x;
dropdup:
    _setTOS (IX-1),(IX-2)
    ret

; duplicate second from top of data stack
; x1 x2 -- x1 x2 x1
over:
    call dup
    _setTOS (IX-3),(IX-4)
    ret

nip:
    dec IX
    dec IX
    ret

swap:
    _alter2 -2,C
    _alter2 -1,B
    ret

; tuck:                                ; x y -- y x y
;     call swap
;     call over
;     ret

; rot top three items, third from top ends up on top of data stack
; rot:                                 ; x1 x2 x3 -- x2 x3 x1
;     push DE
;     _alter3 -2,C,-4
;     _alter3 -1,B,-3
;     pop DE
;     ret

; reverse rot top three items, top of data stack becomes third from top  stack
; nrot:                                ; x1 x2 x3 -- x3 x1 x2
;     push DE
;     _alter3 -4,C,-2
;     _alter3 -3,B,-1
;     pop DE
;     ret

dup2:                                           ; xa xb -- xa xb xa xb
    call over
    call over
    ret

drop2:                                          ; x x --   ?????????????????
    call nip
    call drop
    ret

nip2:
    dec IX
    dec IX
    dec IX
    dec IX
    ret

over2:                               ;x1a x1b x2a x2b -- x1a x1b x2a x2b x1a x1b
    call dup2
    _setTOS (IX-9),(IX-10)
    _getTOS (IX-1),(IX-2)
    _setTOS (IX-7),(IX-8)
    ret

; swap the top two items of data stack
; swap2:                               ; x1a x1b x2a x2b -- x2a x2b x1a x1b
;     push DE
;     _alter2x -1,-5
;     _alter2x -2,-6
;     _alter2 -4,C
;     _alter2 -3,B
;     pop DE
;     ret

; rot top three items, third from top ends up on top of data stack
; rot2:                                ; x1a x1b x2a x2b x3a x3b -- x2a x2b x3a x3b x1a x1b
;     push DE
;     _alter3x -6,-2,-10
;     _alter3x -5,-1,-9
;     _alter3 -4,C,-8
;     _alter3 -3,B,-7
;     pop DE
;     ret

; rot top three items, third from top ends up on top of data stack
; nrot2:                               ; x1a x1b x2a x2b x3a x3b -- x3a x3b x1a x1b x2a x2b
;     push DE

;     _alter3x -10,-2,-6
;     _alter3x -9,-1,-5
;     _alter3 -8,C,-4
;     _alter3 -7,B,-3

;     pop DE
;     ret

isZero:                                         ; n -- ?  ; this is wrong, should leave boolean
    _compareZero B,C
    call drop
    ret

; depth of data stack
; destroys: HL
defword "depth", 0, depth                       ; -- n
    push IX
    pop HL
    call dup
    ld BC,dataStack
    or A
    sbc HL,BC
    _setTOS  H,L
    _div2
    ret

; destroys: HL
fetch:                                          ; ptr -- n
    _getTOS H,L
    ld C,(HL)
    inc HL
    ld B,(HL)
    ret

; destroys: HL
store:                                          ; n ptr --
    ; _getTOS H,L
    ; call drop
    _pop HL
    ld (HL),C
    inc HL
    ld (HL),B
    call drop
    ret

; destroys: HL
storeChar:                                      ; c ptr --
    ; _getTOS H,L
    ; call drop
    _pop HL
    ld (HL),C
    call drop
    ret

