defword "repl", 0, repl
    ld IX, PARAM_STACK                  ; reset param stack
    call interpret
    ret

NOT_FOUND:  .pstr "NOT FOUND!\r\n\r\n"

interpret:
    _do
        _pushValue wordBuf1             ; buffer
        _pushValue $40                  ; max length
        _pushValue $20                  ; delim
    	call parseWord                  ; str len
        _dup                        ; str len len
        _isZero                         ; str len
        _if z
            _drop2                      ; --
            _break
        _else
            _dup                    ; str len len
            ld BC, (nestLevel)          ; str len nesting
            _isZero                     ; str len
            _if z
                call interpImmed        ; num?
            _else
                call interpCompile      ;
            _endIf
        _endIf
    _endDo
    ret

interpImmed:                            ; str len -- num?
    _dup2                               ; str len str len
    call find                           ; str len ptrOrNull
    _dup                            ; str len ptrOrNull ptrOrNull
    _isZero                             ; str len ptrOrNull
    _if z
        _drop                       ; str len
        _drop
        _drop                       ; --

        _pushValue NOT_FOUND             ; pstr

        call printPStr                  ; --
    _else
        call getBody                    ; ptr
        call execute                    ; ?
    _endif
    ret

interpCompile:
    _dup2
    call find
    _dup
    _isZero
    _if z
        _pushValue NOT_FOUND
        call printPStr
    _else
        call getBody
        call execute
    _endif
    ret

getBody:                                ; ptr -- ptr'
    inc BC                              ;
    inc BC                              ; skip over backlink
    inc BC                              ; skip over flags
    ld A,(BC)                           ; A = len of routine's name
    inc BC                              ; skip over len
    add A,C
    ld C,A
    ld A,0
    adc A,B
    ld B,A
    ret

defword "execute", 0, execute
    _load H,L, B,C
    jp (HL)

