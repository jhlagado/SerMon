defword "parseWord", 0, parseWord       ; -- c-addr
    call dup                            ; dup delim
    call skipDelims
    call wordRead
    ret

defword "skipDelims", 0, skipDelims     ; delim -- char
    _do
        call getKey                     ; get next key, returned in A
        _switch

            bit 7, A                    ; check end of input, used by tests
            _if nz
                ld A,0
                _break
            _endif

            cp $5C                      ; \ start of a comment?
            _case z                     ; if yes skip to end of line
                _do
                    call getKey
                    cp "\r"             ; end of line yet?
                    _if nz
                        cp "\n"         ; end of line yet?
                    _endif
                _until z
                _enddo
            _endcase

            cp C                        ; = space?
            _case z
            _endcase

            cp " "                      ; < space?
            _case c
            _endcase

            ; default case
            _break

        _endswitch
    _enddo
    _load B,C, 0,A                      ; TOS = char
    ret

wordRead:                               ; ptr maxlen delim char -- ptr len
    ld A,C                              ; A = char
    call drop                           ; TOS = delim
    ld E,C                              ; E = delim (formerly C)
    call drop                           ; TOS = maxlen
    ld D,C                              ; D = maxlen (formerly E)
    call dropdup                        ; ptr ptr
    or A
    _if nz
        _do
            ld (BC), A                  ; add character to return lineBuf
            inc BC                      ; ptr'
            call getKey                 ; get next key
            cp E                        ; = delim?
        _until z
            cp " "                      ; < space? i.e. control chars
        _until c
            dec D
        _until z
        _enddo
        _load H,L, B,C                  ; HL = ptr'
        call dropdup                    ; ptr ptr
        or A
        sbc HL, BC                      ; ptr' - ptr
        _load B,C, H,L                  ; ptr len
    _else
        ld BC,0                         ; ptr len (where len = 0)
    _endif
    ret
