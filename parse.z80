defword "repl", 0, repl
    ld IX, PARAM_STACK                  ; reset param stack
    call interpret
    ret

interpret:
    _do
        _pushValue $20                  ; delim
    	call parseWord                  ; pstr 
        call unpackStr                  ; pstr str len
        checkZeroWord B,C               ; 
    _until z
        call printStr
        call printSpace
    _endDo
    ret

defword "parseWord", 0, parseWord       ; delim -- c-addr
    _dup                                ; dup delim
    call skipDelims
    _pushValue $40                      ; max length
    _pushValue wordBuf1                 ; buffer
    call wordRead
    ret

defword "skipDelims", 0, skipDelims     ; delim -- char
    _do
        call getKey                     ; get next key, returned in A
        _switch

            bit 7, A                    ; check end of input, used by tests
            _if nz
                ld A,0
                _break
            _endif

            cp $5C                      ; \ start of a comment?
            _case z                     ; if yes skip to end of line
                _do
                    call getKey
                    cp "\r"             ; end of line yet?
                    _if nz
                        cp "\n"         ; end of line yet?
                    _endif
                _until z
                _enddo
            _endcase

            cp C                        ; = space?
            _case z
            _endcase

            cp " "                      ; < space?
            _case c
            _endcase

            ; default case
            _break

        _endswitch
    _enddo
    loadWord B,C, 0,A                   ; TOS = char
    ret

wordRead:                               ; delim char len addr -- c-addr
    _pop H,L                            ; HL = addr
    ld E,C                              ; E = TOS(LO) = len (max length)
    _drop                               ; C = TOS(LO) = char
    ld A,C                              ; A = char
    _drop                               ; C = TOS(LO) = delim
    ld B,E                              ; B = (max) length
    ld D,0                              ; D = len count
    or A
    _if nz
        push HL                         ; save a copy of HL
        inc HL                          ; move to leave space for length byte
        _do
            ld (HL), A                  ; add character to return lineBuf
            inc HL
            inc D
            call getKey                 ; get next key
            cp C                        ; = delim?
        _until z
            cp " "                      ; < space? i.e. control chars
        _until c
        _djnz
        pop HL                          ; restore HL
    _endif
    ld (HL),D                           ; write length
    loadWord B,C, H,L                   ; TOS = str ptr
    ret

