defword "repl", 0, repl
    ld IX, PARAM_STACK                  ; reset param stack
    call interpret
    ret

interpret:
    _do
    	call parseWord                  ; pstr
        call unpackStr                  ; pstr str len
        _compareZero B,C               ;
    _until z
        call printStr
        call printSpace
        call printSpace
    _endDo
    ret

defword "parseWord", 0, parseWord       ; -- c-addr
    _pushValue wordBuf1                 ; buffer
    _pushValue $40                      ; max length
    _pushValue $20                      ; delim
    call dup                            ; dup delim
    call skipDelims
    call wordRead
    ret

defword "skipDelims", 0, skipDelims     ; delim -- char
    _do
        call getKey                     ; get next key, returned in A
        _switch

            bit 7, A                    ; check end of input, used by tests
            _if nz
                ld A,0
                _break
            _endif

            cp $5C                      ; \ start of a comment?
            _case z                     ; if yes skip to end of line
                _do
                    call getKey
                    cp "\r"             ; end of line yet?
                    _if nz
                        cp "\n"         ; end of line yet?
                    _endif
                _until z
                _enddo
            _endcase

            cp C                        ; = space?
            _case z
            _endcase

            cp " "                      ; < space?
            _case c
            _endcase

            ; default case
            _break

        _endswitch
    _enddo
    _load B,C, 0,A                   ; TOS = char
    ret

wordRead:                               ; addr maxlen delim char -- c-addr
    ld A,C                              ; A = char
    call drop                           ; TOS = delim
    ld E,C                              ; E = delim (formerly C)
    call drop                           ; TOS = maxlen
    ld D,C                              ; D = maxlen (formerly E)
    call drop                           ; TOS = addr
    call dup                            ; addr addr
    or A
    _if nz
        inc BC                              ; addr' leave space for length byte
        _do
            ld (BC), A                      ; add character to return lineBuf
            inc BC                          ; addr'
            call getKey                     ; get next key
            cp E                            ; = delim?
        _until z
            cp " "                          ; < space? i.e. control chars
        _until c
            dec D
        _until z
        _enddo
        ld H,B
        ld L,C                              ; HL = addr'
        call drop                           ; addr
        or A
        sbc HL, BC                          ; addr1 - addr
        ld A,L                              ; low byte
        dec A                               ; don't include length byte in length
    _endif
    ld (BC),A                               ; write length
    return                                  ; TOS = pstr

