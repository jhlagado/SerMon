; duplicate top of data stack
; x1 -- x1 x1
dup:
    ld (DE), C                                ; PUSH register pair
    INC DE
    ld (DE), B
    inc DE
    ret

; remove top of data stack
; x1 x2 -- x1
drop:
    dec DE
    ld B,(DE)
    dec DE
    ld C,(DE)
    ret

; duplicate second from top of data stack
; x1 x2 -- x1 x2 x1
over:
    dec DE
    ld H,(DE)
    dec DE
    ld L,(DE)
    inc DE
    inc DE
    call dup
    ld B,H
    ld C,L
    ret

; x1 x2 -- x2
nip:
    dec DE
    dec DE
    ret

; x1 x2 -- x2 x1
swap:
    dec DE
    dec DE
    ld A,(DE)
    ld (DE),C
    ld C,A
    inc DE
    ld A,(DE)
    ld (DE),B
    ld B,A
    inc DE
    ret

tuck:                                ; x y -- y x y
    call swap
    call over
    ret

; ROT 	( x1 x2 x3 -- x2 x3 x1 )	
; Rotate the top three data stack items.

rot:
    _tor
    call swap
    _rfrom
    call swap
    ret

; 2SWAP	( x1 x2 x3 x4 -- x3 x4 x1 x2 )	
; Exchange the top two cell pairs.

swap2:
    call rot
    call tor
    call rot
    call rfrom
    ret

; 2DUP	( x1 x2 -- x1 x2 x1 x2 )	
; Duplicate cell pair x1 x2.

dup2:                                           ; xa xb -- xa xb xa xb
    call over
    call over
    ret

;   2DROP	( x1 x2 -- )			
;	Drop cell pair x1 x2 from the stack.

drop2:                                          ; x x --   ?????????????????
    call nip
    call drop
    ret

nip2:
    dec IX
    dec IX
    dec IX
    dec IX
    ret
    
;   2OVER	( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )	  \ CORE
;	Copy cell pair x1 x2 to the top of the stack.
    
over2:
    call tor
    call tor
    call dup2
    call rfrom
    call rfrom
    call swap2
    ret

isZero:                                         ; n -- ?  ; this is wrong, should leave boolean
    _compareZero B,C
    call drop
    ret

; depth of data stack
; destroys: HL
CODE "depth", 0, depth                       ; -- n
    push IX
    pop HL
    call dup
    ld BC,dataStack
    or A
    sbc HL,BC
    _setTOS  H,L
    _div2
    ret

fetch:                                          ; ptr -- n
    push HL
    _getTOS H,L
    ld C,(HL)
    inc HL
    ld B,(HL)
    pop HL
    ret

store:                                          ; n ptr --
    push HL
    _pop HL
    ld (HL),C
    inc HL
    ld (HL),B
    call drop
    pop HL
    ret

; destroys: HL
storeChar:                                      ; c ptr --
    push HL
    _pop HL
    ld (HL),C
    call drop
    pop HL
    ret

; -- n r: n -- n
rfetch:                                          
    _rfrom
    push BC
    ret
