tor:
    pop HL
    push BC
    push HL
    call drop
    ret

rfrom:
    call dup
    pop HL
    pop BC
    push HL
    ret

; duplicate top of data stack
; x1 -- x1 x1
dup:
    ex DE,HL
    ld (HL), C                                ; PUSH register pair
    inc HL
    ld (HL), B
    inc HL
    ex DE,HL
    ret

; remove top of data stack
; x1 x2 -- x1
drop:
    ex DE,HL
    dec HL
    ld B,(HL)
    dec HL
    ld C,(HL)
    ex DE,HL
    ret

; SWAP	( x1 x2 -- x2 x1 )		
; Exchange top two stack items.
swap:
    ld H,D
    ld L,E
    dec HL
    ld A,B
    ld B,(HL)
    ld (HL),A
    dec HL
    ld A,C
    ld C,(HL)
    ld (HL),A
    ret


; duplicate second from top of data stack
; x1 x2 -- x1 x2 x1
over:
    ld H,D
    ld L,E
    call dup
    dec HL
    ld B,(HL)
    dec HL
    ld C,(HL)
    ret

; NIP 	( n1 n2 -- n2 ) 		
; Discard the second stack item.

nip:
    dec DE
    dec DE
    ret

tuck:                                ; x y -- y x y
    call swap
    call over
    ret

rot:
    call tor 
    call swap
    call rfrom
    call swap
    ret

dup2:                                           ; xa xb -- xa xb xa xb
    call over
    call over
    ret

drop2:                                          ; x x --   ?????????????????
    call nip
    call drop
    ret

; 2SWAP	( x1 x2 x3 x4 -- x3 x4 x1 x2 )	
; Exchange the top two cell pairs.

swap2:
    call rot
    call tor
    call rot
    call rfrom
    ret

;   2OVER	( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )	  \ CORE
;	Copy cell pair x1 x2 to the top of the stack.
    
over2:
    call tor
    call tor
    call dup2
    call rfrom
    call rfrom
    call swap2
    ret

; 2NIP 	( n1 n2 n3 -- n3 ) 		
; Discard the second stack item.

nip2:
    call nip
    call nip
    ret

isZero:                                         ; n -- ?  ; this is wrong, should leave boolean
    _compareZero B,C
    call drop
    ret

; depth of data stack
; destroys: HL
CODE "depth", 0, depth                       ; -- n
    ; push IX
    ; pop DE

    push DE
    pop HL
    call dup
    ld BC,dataStack
    or A
    sbc HL,BC
    ld BC,HL
    _div2
    ret
