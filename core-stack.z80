; duplicate top of data stack
; x1 -- x1 x1
dup:
    push IX
    pop DE
    ex DE,HL
    ld (HL), C                                ; PUSH register pair
    inc HL
    ld (HL), B
    inc HL
    ex DE,HL
    push DE
    pop IX

    ; ld (IX+0), C                                ; PUSH register pair
    ; ld (IX+1), B
    ; inc IX
    ; inc IX
    ret

; remove top of data stack
; x1 x2 -- x1
drop:
    push IX
    pop DE
    ex DE,HL
    dec HL
    ld B,(HL)
    dec HL
    ld C,(HL)
    ex DE,HL
    push DE
    pop IX


    ; dec IX                                      ; POP register pair
    ; dec IX
    ; _setTOS (IX+1),(IX+0)
    ret

; SWAP	( x1 x2 -- x2 x1 )		
; Exchange top two stack items.
swap:
    push IX
    pop DE
    
    ld H,D
    ld L,E
    dec HL
    ld A,B
    ld B,(HL)
    ld (HL),A
    dec HL
    ld A,C
    ld C,(HL)
    ld (HL),A
    
    push DE
    pop IX
    ret


; duplicate second from top of data stack
; x1 x2 -- x1 x2 x1
over:
    push IX
    pop DE

    ld H,D
    ld L,E
    call dup
    dec HL
    ld B,(HL)
    dec HL
    ld C,(HL)

    push DE
    pop IX


    ; call dup
    ; _setTOS (IX-3),(IX-4)
    
    ret

; NIP 	( n1 n2 -- n2 ) 		
; Discard the second stack item.

nip:
    push IX
    pop DE

    dec DE
    dec DE

    push DE
    pop IX

    ret

tuck:                                ; x y -- y x y
    call swap
    call over
    ret

rot:
    _tor
    call swap
    _rfrom
    call swap
    ret

dup2:                                           ; xa xb -- xa xb xa xb
    call over
    call over
    ret

drop2:                                          ; x x --   ?????????????????
    call nip
    call drop
    ret

; 2SWAP	( x1 x2 x3 x4 -- x3 x4 x1 x2 )	
; Exchange the top two cell pairs.

swap2:
    call rot
    _tor
    call rot
    _rfrom
    ret

;   2OVER	( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )	  \ CORE
;	Copy cell pair x1 x2 to the top of the stack.
    
over2:
    _tor
    _tor
    call dup2
    _rfrom
    _rfrom
    call swap2
    ret

; 2NIP 	( n1 n2 n3 -- n3 ) 		
; Discard the second stack item.

nip2:
    call nip
    call nip
    ret

isZero:                                         ; n -- ?  ; this is wrong, should leave boolean
    _compareZero B,C
    call drop
    ret

; depth of data stack
; destroys: HL
CODE "depth", 0, depth                       ; -- n
    push IX
    pop DE

    push DE
    pop HL
    call dup
    ld BC,dataStack
    or A
    sbc HL,BC
    _setTOS  H,L
    _div2
    ret

