.engine mycomputer

.include "struct-macros.z80"
.include "dloop-macros.z80"

TESTMODE equ 0
SERIALMODE equ 6850

ROM_SIZE        equ     $2000
RAM_SIZE        equ     $10000 - ROM_SIZE

SER_BUFSIZE     equ     $3F
PARAM_STACK_SIZE equ    $80                ; parameter stack

START_ROM       equ     $0
START_RAM       equ     START_ROM + ROM_SIZE
END_RAM         equ     START_RAM + RAM_SIZE
RET_STACK       equ     END_RAM             ; return stack, grows down

.macro loadWord, destHI, destLO, srcHI, srcLO    ; transfer from src reg pair to dest reg pair
    ld destLO, srcLO
    ld destHI, srcHI
.endm

.macro checkZeroWord, regHI, regLO          ; check if reg pair is zero
    ld A, regLO
    or regHI
.endm

.macro _pop0, regHI, regLO
    dec IX                  ; POP register pair
    ld regHI, (IX+0)
    dec IX
    ld regLO, (IX+0)
.endm

.macro _drop                       ; x --
    _pop0 B,C		        ; drop top of stack
.endm

.org START_ROM
RST00:                                      ; Reset
    di                                      ; Disable interrupts
    jp start

.org $0038
RST38:                                      ; rst 38
    jp serialIn

start:
    ld SP, RET_STACK                        ; Initialise the return stack.
    ld IX, PARAM_STACK                      ; initialise the param stack.
    call initSerial

    ld BC, TXT_INTRO
    call printPStr

    _do
        call getc
        call putc
    _enddo

printPStr:                          ; _ptr --
    loadWord H,L, B,C
    ld C, (HL)
    ld B, 0
    inc HL
    jr printStr1
printStr:                           ; ptr len --
    _pop0 H,L
printStr1:
    _do
        ld A,(HL)
        call putc
        inc HL
        dec BC
        checkZeroWord B,C
    _until z
    _enddo
    _drop                            ; clear TOS
    ret

.include "serial.z80"

TXT_INTRO:      .pstr "Echo 2020\r\n\r\n"

org START_RAM

serInPtr:       dw 0
serRdPtr:       dw 0
serBufUsed:     dw 0
serBuf:         ds SER_BUFSIZE
PARAM_STACK:    ds PARAM_STACK_SIZE

START_USER:
